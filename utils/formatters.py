"""–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram"""

from typing import List
from models import Course, Module, Lesson, ModuleContent, LessonContent


def format_course_info(course: Course) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ"""
    text = f"üéì <b>{course.course_title}</b>\n\n"
    text += f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {course.target_audience}\n"
    
    if course.duration_weeks:
        text += f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {course.duration_weeks} –Ω–µ–¥–µ–ª—å\n"
    if course.duration_hours:
        text += f"üìö <b>–ß–∞—Å–æ–≤:</b> {course.duration_hours}\n"
    
    text += f"\n<b>–ú–æ–¥—É–ª–∏ ({len(course.modules)}):</b>\n\n"
    
    for i, module in enumerate(course.modules, 1):
        text += f"<b>{i}. {module.module_title}</b>\n"
        text += f"<i>{module.module_goal}</i>\n"
        text += f"–£—Ä–æ–∫–æ–≤: {len(module.lessons)}\n\n"
    
    return text


def format_module_info(module: Module, module_number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ"""
    text = f"üìö <b>–ú–æ–¥—É–ª—å {module_number}: {module.module_title}</b>\n\n"
    text += f"<b>–¶–µ–ª—å:</b> {module.module_goal}\n\n"
    text += f"<b>–£—Ä–æ–∫–∏ ({len(module.lessons)}):</b>\n\n"
    
    for i, lesson in enumerate(module.lessons, 1):
        has_detailed = "üìñ" if lesson.detailed_content else "üìù"
        text += f"{has_detailed} {i}. {lesson.lesson_title} ({lesson.estimated_time_minutes} –º–∏–Ω)\n"
    
    text += f"\n<b>–õ–µ–≥–µ–Ω–¥–∞:</b>\n"
    text += "üìñ - –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
    text += "üìù - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞\n"
    
    return text


def format_lesson_info(lesson: Lesson, module_title: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Ä–æ–∫–µ"""
    text = f"üìù <b>–£—Ä–æ–∫: {lesson.lesson_title}</b>\n\n"
    text += f"<b>–ú–æ–¥—É–ª—å:</b> {module_title}\n"
    text += f"<b>–§–æ—Ä–º–∞—Ç:</b> {lesson.format}\n"
    text += f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {lesson.estimated_time_minutes} –º–∏–Ω—É—Ç\n"
    text += f"<b>–û—Ü–µ–Ω–∫–∞:</b> {lesson.assessment}\n\n"
    text += f"<b>–¶–µ–ª—å —É—Ä–æ–∫–∞:</b>\n{lesson.lesson_goal}\n\n"
    
    if lesson.content_outline:
        text += f"<b>–ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è ({len(lesson.content_outline)} —Ç–µ–º):</b>\n"
        for i, topic in enumerate(lesson.content_outline[:5], 1):
            text += f"{i}. {topic}\n"
        if len(lesson.content_outline) > 5:
            text += f"... –∏ –µ—â—ë {len(lesson.content_outline) - 5} —Ç–µ–º\n"
        text += "\n"
    
    if lesson.detailed_content:
        text += f"‚úÖ <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n"
        text += f"–¢–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–æ: {len(lesson.detailed_content.topics)}\n"
        text += f"–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: ~{lesson.detailed_content.total_estimated_time_minutes} –º–∏–Ω\n\n"
    else:
        text += "‚ÑπÔ∏è <i>–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã</i>\n\n"
    
    return text


def format_module_content_info(module_content: ModuleContent) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ –º–æ–¥—É–ª—è"""
    text = f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
    text += f"üìö <b>–ú–æ–¥—É–ª—å:</b> {module_content.module_title}\n"
    text += f"üìñ <b>–õ–µ–∫—Ü–∏–π:</b> {len(module_content.lectures)}\n"
    text += f"üìä <b>–°–ª–∞–π–¥–æ–≤:</b> {module_content.total_slides}\n"
    text += f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {module_content.estimated_duration_minutes} –º–∏–Ω—É—Ç\n\n"
    
    for i, lecture in enumerate(module_content.lectures, 1):
        text += f"{i}. {lecture.lecture_title} ({len(lecture.slides)} —Å–ª–∞–π–¥–æ–≤)\n"
    
    text += "\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>"
    
    return text


def format_lesson_content_info(lesson_content: LessonContent, lesson_title: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö —É—Ä–æ–∫–∞"""
    text = f"‚úÖ <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
    text += f"üìö <b>–£—Ä–æ–∫:</b> {lesson_title}\n"
    text += f"üìñ <b>–¢–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–æ:</b> {len(lesson_content.topics)}\n\n"
    
    text += "<b>–¢–µ–º—ã:</b>\n"
    for i, topic_material in enumerate(lesson_content.topics[:5], 1):
        text += f"{i}. {topic_material.topic_title}\n"
        text += f"   ‚Ä¢ {len(topic_material.examples)} –ø—Ä–∏–º–µ—Ä–æ–≤\n"
        text += f"   ‚Ä¢ {len(topic_material.quiz_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
    
    if len(lesson_content.topics) > 5:
        text += f"... –∏ –µ—â—ë {len(lesson_content.topics) - 5} —Ç–µ–º\n"
    
    text += "\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>"
    
    return text


def truncate_text(text: str, max_length: int = 200) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length] + "..."

