"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ Telegram
–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —É–≤–∏–¥–µ—Ç—å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –≤–≤–æ–¥–µ /
"""
# SSL FIX
import os
os.environ['PYTHONHTTPSVERIFY'] = '0'
os.environ['CURL_CA_BUNDLE'] = ''
os.environ['REQUESTS_CA_BUNDLE'] = ''

import ssl
ssl._create_default_https_context = ssl._create_unverified_context

import asyncio
from telegram import Bot, BotCommand
from dotenv import load_dotenv
import httpx

# –ü–∞—Ç—á –¥–ª—è httpx
original_init = httpx.AsyncClient.__init__

def patched_init(self, *args, **kwargs):
    kwargs['verify'] = False
    original_init(self, *args, **kwargs)

httpx.AsyncClient.__init__ = patched_init

load_dotenv()

async def set_commands():
    bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
    
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand("create", "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å"),
        BotCommand("view", "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—É—Ä—Å–∞"),
        BotCommand("edit", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å/–º–æ–¥—É–ª–∏/—É—Ä–æ–∫–∏"),
        BotCommand("generate", "üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫—Ü–∏–∏ –∏ —Å–ª–∞–π–¥—ã"),
        BotCommand("regenerate", "üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫—Ü–∏–∏/—Å–ª–∞–π–¥—ã"),
        BotCommand("regenerate_lesson", "üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ä–æ–∫"),
        BotCommand("generate_topics", "üìñ –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–∞–º —É—Ä–æ–∫–∞"),
        BotCommand("export", "üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å (JSON/HTML/MD/TXT)"),
    ]
    
    await bot.set_my_commands(commands)
    print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    print("\n–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤–≤–æ–¥–µ '/' –≤ Telegram –≤—ã —É–≤–∏–¥–∏—Ç–µ:")
    for cmd in commands:
        print(f"  /{cmd.command} - {cmd.description}")

if __name__ == "__main__":
    asyncio.run(set_commands())

