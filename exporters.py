"""
–ú–æ–¥—É–ª—å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—É—Ä—Å–æ–≤ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
"""
import json
from typing import Optional
from models import Course, ModuleContent, Lecture, Slide
from datetime import datetime


class CourseExporter:
    """–ö–ª–∞—Å—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—É—Ä—Å–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    
    def export_to_json(self, course: Course) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        course_dict = course.dict()
        return json.dumps(course_dict, ensure_ascii=False, indent=2)
    
    def export_to_markdown(self, course: Course) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Markdown —Ñ–æ—Ä–º–∞—Ç"""
        md = f"# {course.course_title}\n\n"
        md += f"**–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:** {course.target_audience}\n\n"
        
        if course.duration_weeks:
            md += f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {course.duration_weeks} –Ω–µ–¥–µ–ª—å"
            if course.duration_hours:
                md += f" ({course.duration_hours} —á–∞—Å–æ–≤)\n\n"
            else:
                md += "\n\n"
        
        md += "---\n\n"
        md += "## üìö –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞\n\n"
        
        for i, module in enumerate(course.modules, 1):
            md += f"### –ú–æ–¥—É–ª—å {i}: {module.module_title}\n\n"
            md += f"**–¶–µ–ª—å –º–æ–¥—É–ª—è:** {module.module_goal}\n\n"
            md += f"**–£—Ä–æ–∫–∏:**\n\n"
            
            for j, lesson in enumerate(module.lessons, 1):
                md += f"#### {i}.{j} {lesson.lesson_title}\n\n"
                md += f"- **–¶–µ–ª—å:** {lesson.lesson_goal}\n"
                md += f"- **–§–æ—Ä–º–∞—Ç:** {lesson.format}\n"
                md += f"- **–í—Ä–µ–º—è:** {lesson.estimated_time_minutes} –º–∏–Ω—É—Ç\n"
                md += f"- **–û—Ü–µ–Ω–∫–∞:** {lesson.assessment}\n\n"
                
                if lesson.content_outline:
                    md += "**–ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:**\n"
                    for topic in lesson.content_outline:
                        md += f"- {topic}\n"
                    md += "\n"
            
            md += "---\n\n"
        
        md += f"\n*–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M')}*\n"
        return md
    
    def export_to_html(self, course: Course) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ HTML —Ñ–æ—Ä–º–∞—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
        html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{course.course_title}</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
        }}
        
        .container {{
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
            text-align: center;
        }}
        
        .header h1 {{
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }}
        
        .header .meta {{
            font-size: 1.1em;
            opacity: 0.9;
        }}
        
        .content {{
            padding: 40px;
        }}
        
        .module {{
            margin-bottom: 40px;
            border-left: 4px solid #667eea;
            padding-left: 20px;
        }}
        
        .module-header {{
            background: #f8f9fa;
            padding: 20px;
            margin-left: -20px;
            margin-bottom: 20px;
            border-radius: 10px;
        }}
        
        .module-title {{
            color: #667eea;
            font-size: 1.8em;
            margin-bottom: 10px;
        }}
        
        .module-goal {{
            color: #666;
            font-style: italic;
            font-size: 1.1em;
        }}
        
        .lesson {{
            background: #f8f9fa;
            padding: 20px;
            margin-bottom: 15px;
            border-radius: 10px;
            border-left: 3px solid #764ba2;
        }}
        
        .lesson-title {{
            color: #764ba2;
            font-size: 1.3em;
            margin-bottom: 10px;
            font-weight: 600;
        }}
        
        .lesson-meta {{
            display: flex;
            gap: 20px;
            margin: 10px 0;
            flex-wrap: wrap;
        }}
        
        .meta-item {{
            background: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            color: #666;
        }}
        
        .meta-item strong {{
            color: #333;
        }}
        
        .content-outline {{
            margin-top: 15px;
        }}
        
        .content-outline h4 {{
            color: #555;
            margin-bottom: 10px;
        }}
        
        .content-outline ul {{
            list-style-position: inside;
            color: #666;
        }}
        
        .content-outline li {{
            padding: 5px 0;
        }}
        
        .footer {{
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #666;
            font-size: 0.9em;
        }}
        
        .badge {{
            display: inline-block;
            background: #667eea;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            margin: 5px;
        }}
        
        @media print {{
            body {{
                background: white;
                padding: 0;
            }}
            
            .container {{
                box-shadow: none;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéì {course.course_title}</h1>
            <div class="meta">
                <p>üë• {course.target_audience}</p>
"""
        
        if course.duration_weeks:
            html += f"                <p>‚è±Ô∏è {course.duration_weeks} –Ω–µ–¥–µ–ª—å"
            if course.duration_hours:
                html += f" ‚Ä¢ {course.duration_hours} —á–∞—Å–æ–≤"
            html += "</p>\n"
        
        html += f"""                <p>üìö {len(course.modules)} –º–æ–¥—É–ª–µ–π</p>
            </div>
        </div>
        
        <div class="content">
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª–∏
        for i, module in enumerate(course.modules, 1):
            html += f"""            <div class="module">
                <div class="module-header">
                    <div class="module-title">–ú–æ–¥—É–ª—å {i}: {module.module_title}</div>
                    <div class="module-goal">üéØ {module.module_goal}</div>
                </div>
                
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–∫–∏
            for j, lesson in enumerate(module.lessons, 1):
                html += f"""                <div class="lesson">
                    <div class="lesson-title">{i}.{j} {lesson.lesson_title}</div>
                    <p><strong>–¶–µ–ª—å:</strong> {lesson.lesson_goal}</p>
                    
                    <div class="lesson-meta">
                        <span class="meta-item"><strong>–§–æ—Ä–º–∞—Ç:</strong> {lesson.format}</span>
                        <span class="meta-item"><strong>–í—Ä–µ–º—è:</strong> {lesson.estimated_time_minutes} –º–∏–Ω</span>
                        <span class="meta-item"><strong>–û—Ü–µ–Ω–∫–∞:</strong> {lesson.assessment}</span>
                    </div>
"""
                
                if lesson.content_outline:
                    html += """                    
                    <div class="content-outline">
                        <h4>üìã –ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:</h4>
                        <ul>
"""
                    for topic in lesson.content_outline:
                        html += f"                            <li>{topic}</li>\n"
                    
                    html += """                        </ul>
                    </div>
"""
                
                html += "                </div>\n\n"
            
            html += "            </div>\n\n"
        
        html += f"""        </div>
        
        <div class="footer">
            <p>üìÑ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y –≤ %H:%M')}</p>
            <p>ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ AI Course Builder</p>
        </div>
    </div>
</body>
</html>"""
        
        return html
    
    def export_to_txt(self, course: Course) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ –ø—Ä–æ—Å—Ç–æ–π TXT —Ñ–æ—Ä–º–∞—Ç"""
        txt = f"{'='*80}\n"
        txt += f"{course.course_title.upper().center(80)}\n"
        txt += f"{'='*80}\n\n"
        
        txt += f"–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {course.target_audience}\n"
        if course.duration_weeks:
            txt += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {course.duration_weeks} –Ω–µ–¥–µ–ª—å"
            if course.duration_hours:
                txt += f" ({course.duration_hours} —á–∞—Å–æ–≤)"
            txt += "\n"
        
        txt += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π: {len(course.modules)}\n\n"
        txt += f"{'-'*80}\n\n"
        
        for i, module in enumerate(course.modules, 1):
            txt += f"–ú–û–î–£–õ–¨ {i}: {module.module_title.upper()}\n"
            txt += f"{'-'*80}\n"
            txt += f"–¶–µ–ª—å: {module.module_goal}\n\n"
            
            for j, lesson in enumerate(module.lessons, 1):
                txt += f"  {i}.{j} {lesson.lesson_title}\n"
                txt += f"      –¶–µ–ª—å: {lesson.lesson_goal}\n"
                txt += f"      –§–æ—Ä–º–∞—Ç: {lesson.format} | –í—Ä–µ–º—è: {lesson.estimated_time_minutes} –º–∏–Ω | –û—Ü–µ–Ω–∫–∞: {lesson.assessment}\n"
                
                if lesson.content_outline:
                    txt += f"      –ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è:\n"
                    for topic in lesson.content_outline:
                        txt += f"        ‚Ä¢ {topic}\n"
                txt += "\n"
            
            txt += f"{'-'*80}\n\n"
        
        txt += f"\n–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        txt += f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: AI Course Builder\n"
        txt += f"{'='*80}\n"
        
        return txt
    
    # ========== –≠–ö–°–ü–û–†–¢ –ö–û–ù–¢–ï–ù–¢–ê –ú–û–î–£–õ–ï–ô ==========
    
    def export_module_content_to_json(self, content: ModuleContent) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è –≤ JSON"""
        content_dict = content.dict()
        return json.dumps(content_dict, ensure_ascii=False, indent=2)
    
    def export_module_content_to_html(self, content: ModuleContent) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è –≤ HTML (–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è)"""
        html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{content.module_title} - –õ–µ–∫—Ü–∏–∏</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #1a1a2e;
            color: #eee;
        }}
        
        .presentation {{
            max-width: 1200px;
            margin: 0 auto;
        }}
        
        .lecture {{
            margin-bottom: 60px;
        }}
        
        .lecture-header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 40px;
            border-radius: 20px;
            margin-bottom: 30px;
            text-align: center;
        }}
        
        .lecture-title {{
            font-size: 2.5em;
            margin-bottom: 15px;
        }}
        
        .lecture-meta {{
            font-size: 1.1em;
            opacity: 0.9;
        }}
        
        .objectives {{
            background: #16213e;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
            border-left: 5px solid #667eea;
        }}
        
        .objectives h3 {{
            color: #667eea;
            margin-bottom: 15px;
        }}
        
        .objectives ul {{
            list-style-position: inside;
            line-height: 1.8;
        }}
        
        .slide {{
            background: white;
            color: #333;
            padding: 50px;
            margin-bottom: 30px;
            border-radius: 20px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            min-height: 500px;
            position: relative;
        }}
        
        .slide-number {{
            position: absolute;
            top: 20px;
            right: 30px;
            background: #667eea;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-size: 0.9em;
        }}
        
        .slide-title {{
            font-size: 2.2em;
            color: #764ba2;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 3px solid #667eea;
        }}
        
        .slide.title-slide {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
        }}
        
        .slide.title-slide .slide-title {{
            color: white;
            border: none;
            font-size: 3em;
        }}
        
        .slide-content {{
            font-size: 1.3em;
            line-height: 1.8;
            white-space: pre-line;
        }}
        
        .code-example {{
            background: #1a1a2e;
            color: #eee;
            padding: 25px;
            border-radius: 10px;
            margin: 20px 0;
            font-family: 'Courier New', monospace;
            overflow-x: auto;
            white-space: pre;
            border-left: 4px solid #667eea;
        }}
        
        .notes {{
            background: #fff3cd;
            color: #856404;
            padding: 20px;
            border-radius: 10px;
            margin-top: 30px;
            border-left: 4px solid #ffc107;
        }}
        
        .notes h4 {{
            margin-bottom: 10px;
            color: #856404;
        }}
        
        .takeaways {{
            background: #d4edda;
            color: #155724;
            padding: 30px;
            border-radius: 15px;
            margin-top: 30px;
            border-left: 5px solid #28a745;
        }}
        
        .takeaways h3 {{
            color: #28a745;
            margin-bottom: 15px;
        }}
        
        @media print {{
            .slide {{
                page-break-after: always;
            }}
        }}
    </style>
</head>
<body>
    <div class="presentation">
        <div class="lecture-header">
            <div class="lecture-title">–ú–æ–¥—É–ª—å {content.module_number}</div>
            <h1>{content.module_title}</h1>
            <div class="lecture-meta">
                {len(content.lectures)} –ª–µ–∫—Ü–∏–π ‚Ä¢ {content.total_slides} —Å–ª–∞–π–¥–æ–≤ ‚Ä¢ {content.estimated_duration_minutes} –º–∏–Ω—É—Ç
            </div>
        </div>
"""
        
        for lecture in content.lectures:
            html += f"""
        <div class="lecture">
            <div class="objectives">
                <h3>üéØ –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è</h3>
                <ul>
"""
            for obj in lecture.learning_objectives:
                html += f"                    <li>{obj}</li>\n"
            
            html += """                </ul>
            </div>
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥—ã
            for slide in lecture.slides:
                slide_class = "title-slide" if slide.slide_type == "title" else ""
                html += f"""
            <div class="slide {slide_class}">
                <div class="slide-number">–°–ª–∞–π–¥ {slide.slide_number}</div>
                <h2 class="slide-title">{slide.title}</h2>
                <div class="slide-content">{slide.content}</div>
"""
                
                if slide.code_example:
                    html += f"""
                <div class="code-example">{slide.code_example}</div>
"""
                
                if slide.notes:
                    html += f"""
                <div class="notes">
                    <h4>üìù –ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</h4>
                    <p>{slide.notes}</p>
                </div>
"""
                
                html += "            </div>\n"
            
            # –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã –ª–µ–∫—Ü–∏–∏
            html += """
            <div class="takeaways">
                <h3>‚ú® –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã</h3>
                <ul>
"""
            for takeaway in lecture.key_takeaways:
                html += f"                    <li>{takeaway}</li>\n"
            
            html += """                </ul>
            </div>
        </div>
"""
        
        html += f"""
    </div>
    <div style="text-align: center; padding: 40px; color: #888;">
        <p>üìÑ –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
        <p>ü§ñ AI Course Builder</p>
    </div>
</body>
</html>"""
        
        return html
    
    def export_module_content_to_markdown(self, content: ModuleContent) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è –≤ Markdown"""
        md = f"# –ú–æ–¥—É–ª—å {content.module_number}: {content.module_title}\n\n"
        md += f"**–õ–µ–∫—Ü–∏–π:** {len(content.lectures)} ‚Ä¢ **–°–ª–∞–π–¥–æ–≤:** {content.total_slides} ‚Ä¢ **–í—Ä–µ–º—è:** {content.estimated_duration_minutes} –º–∏–Ω—É—Ç\n\n"
        md += "---\n\n"
        
        for lecture in content.lectures:
            md += f"## üìö {lecture.lecture_title}\n\n"
            md += f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {lecture.duration_minutes} –º–∏–Ω—É—Ç\n\n"
            
            md += "### üéØ –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è\n\n"
            for obj in lecture.learning_objectives:
                md += f"- {obj}\n"
            md += "\n"
            
            md += "### üìä –°–ª–∞–π–¥—ã\n\n"
            
            for slide in lecture.slides:
                md += f"#### –°–ª–∞–π–¥ {slide.slide_number}: {slide.title}\n\n"
                md += f"**–¢–∏–ø:** {slide.slide_type}\n\n"
                md += f"{slide.content}\n\n"
                
                if slide.code_example:
                    md += "```python\n"
                    md += f"{slide.code_example}\n"
                    md += "```\n\n"
                
                if slide.notes:
                    md += f"> üìù **–ó–∞–º–µ—Ç–∫–∏:** {slide.notes}\n\n"
            
            md += "### ‚ú® –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã\n\n"
            for takeaway in lecture.key_takeaways:
                md += f"- {takeaway}\n"
            md += "\n---\n\n"
        
        md += f"\n*–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M')}*\n"
        return md
    
    def export_module_content_to_txt(self, content: ModuleContent) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è –≤ TXT"""
        txt = f"{'='*80}\n"
        txt += f"–ú–û–î–£–õ–¨ {content.module_number}: {content.module_title.upper()}\n"
        txt += f"{'='*80}\n\n"
        txt += f"–õ–µ–∫—Ü–∏–π: {len(content.lectures)} | –°–ª–∞–π–¥–æ–≤: {content.total_slides} | –í—Ä–µ–º—è: {content.estimated_duration_minutes} –º–∏–Ω\n\n"
        
        for lecture in content.lectures:
            txt += f"{'-'*80}\n"
            txt += f"–õ–ï–ö–¶–ò–Ø: {lecture.lecture_title}\n"
            txt += f"{'-'*80}\n"
            txt += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lecture.duration_minutes} –º–∏–Ω—É—Ç\n\n"
            
            txt += "–¶–ï–õ–ò –û–ë–£–ß–ï–ù–ò–Ø:\n"
            for obj in lecture.learning_objectives:
                txt += f"  ‚Ä¢ {obj}\n"
            txt += "\n"
            
            for slide in lecture.slides:
                txt += f"  [{slide.slide_number}] {slide.title}\n"
                txt += f"  –¢–∏–ø: {slide.slide_type}\n"
                txt += f"  {'-'*76}\n"
                
                for line in slide.content.split('\n'):
                    txt += f"    {line}\n"
                
                if slide.code_example:
                    txt += f"\n    –ö–û–î:\n"
                    for line in slide.code_example.split('\n'):
                        txt += f"    {line}\n"
                
                if slide.notes:
                    txt += f"\n    [–ó–∞–º–µ—Ç–∫–∏: {slide.notes}]\n"
                
                txt += "\n"
            
            txt += "–ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n"
            for takeaway in lecture.key_takeaways:
                txt += f"  ‚úì {takeaway}\n"
            txt += "\n\n"
        
        txt += f"{'='*80}\n"
        txt += f"–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')} | AI Course Builder\n"
        txt += f"{'='*80}\n"
        
        return txt
    
    # ==================== –≠–ö–°–ü–û–†–¢ –î–ï–¢–ê–õ–¨–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í –£–†–û–ö–ê ====================
    
    def export_lesson_content_to_json(self, lesson_content) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞ –≤ JSON"""
        from models import LessonContent
        if isinstance(lesson_content, LessonContent):
            lesson_dict = lesson_content.dict()
        else:
            lesson_dict = lesson_content
        return json.dumps(lesson_dict, ensure_ascii=False, indent=2)
    
    def export_lesson_content_to_html(self, lesson_content) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞ –≤ HTML"""
        from models import LessonContent
        
        html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{lesson_content.lesson_title} - –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px;
        }}
        
        .header h1 {{
            font-size: 2.5em;
            margin-bottom: 10px;
        }}
        
        .header p {{
            font-size: 1.1em;
            opacity: 0.9;
        }}
        
        .content {{
            padding: 40px;
        }}
        
        .topic {{
            margin-bottom: 60px;
            border-left: 4px solid #667eea;
            padding-left: 20px;
        }}
        
        .topic-header {{
            background: #f8f9fa;
            padding: 20px;
            margin-left: -20px;
            margin-bottom: 20px;
            border-radius: 8px;
        }}
        
        .topic-title {{
            font-size: 2em;
            color: #667eea;
            margin-bottom: 10px;
        }}
        
        .section {{
            margin: 30px 0;
        }}
        
        .section-title {{
            font-size: 1.3em;
            color: #764ba2;
            margin-bottom: 15px;
            border-bottom: 2px solid #eee;
            padding-bottom: 10px;
        }}
        
        .introduction, .theory {{
            white-space: pre-wrap;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 8px;
            margin: 15px 0;
        }}
        
        .example-item, .exercise-item, .question-item {{
            background: #fff;
            border: 1px solid #ddd;
            padding: 15px;
            margin: 10px 0;
            border-radius: 8px;
        }}
        
        .code-block {{
            background: #2d2d2d;
            color: #f8f8f2;
            padding: 20px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            overflow-x: auto;
            white-space: pre;
            margin: 15px 0;
        }}
        
        .key-point {{
            background: #e7f3ff;
            padding: 10px 15px;
            margin: 8px 0;
            border-left: 4px solid #2196F3;
            border-radius: 4px;
        }}
        
        .mistake {{
            background: #fff3cd;
            padding: 10px 15px;
            margin: 8px 0;
            border-left: 4px solid #ff9800;
            border-radius: 4px;
        }}
        
        .best-practice {{
            background: #d4edda;
            padding: 10px 15px;
            margin: 8px 0;
            border-left: 4px solid #28a745;
            border-radius: 4px;
        }}
        
        .resource {{
            background: #e8f5e9;
            padding: 10px 15px;
            margin: 8px 0;
            border-radius: 4px;
        }}
        
        .time-badge {{
            display: inline-block;
            background: #667eea;
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            margin: 10px 0;
        }}
        
        .footer {{
            background: #f8f9fa;
            padding: 20px;
            text-align: center;
            color: #666;
            border-top: 1px solid #ddd;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìñ {lesson_content.lesson_title}</h1>
            <p>{lesson_content.lesson_goal}</p>
            <div style="margin-top: 20px;">
                <span style="background: rgba(255,255,255,0.2); padding: 8px 16px; border-radius: 20px; margin-right: 10px;">
                    –ú–æ–¥—É–ª—å {lesson_content.module_number}
                </span>
                <span style="background: rgba(255,255,255,0.2); padding: 8px 16px; border-radius: 20px;">
                    {lesson_content.total_topics} —Ç–µ–º
                </span>
                <span style="background: rgba(255,255,255,0.2); padding: 8px 16px; border-radius: 20px;">
                    ~{lesson_content.total_estimated_time_minutes} –º–∏–Ω—É—Ç
                </span>
            </div>
        </div>
        
        <div class="content">
"""
        
        for idx, topic in enumerate(lesson_content.topics, 1):
            html += f"""
            <div class="topic">
                <div class="topic-header">
                    <div class="topic-title">–¢–µ–º–∞ {idx}: {topic.topic_title}</div>
                    <p>{topic.topic_description if hasattr(topic, 'topic_description') else ''}</p>
                    <span class="time-badge">‚è±Ô∏è ~{topic.estimated_reading_time_minutes} –º–∏–Ω—É—Ç</span>
                </div>
                
                <div class="section">
                    <div class="section-title">üìù –í–≤–µ–¥–µ–Ω–∏–µ</div>
                    <div class="introduction">{topic.introduction}</div>
                </div>
                
                <div class="section">
                    <div class="section-title">üìö –¢–µ–æ—Ä–∏—è</div>
                    <div class="theory">{topic.theory}</div>
                </div>
"""
            
            if topic.examples:
                html += """
                <div class="section">
                    <div class="section-title">üí° –ü—Ä–∏–º–µ—Ä—ã</div>
"""
                for i, example in enumerate(topic.examples, 1):
                    html += f'<div class="example-item"><strong>–ü—Ä–∏–º–µ—Ä {i}:</strong> {example}</div>\n'
                html += "</div>\n"
            
            if topic.code_snippets:
                html += """
                <div class="section">
                    <div class="section-title">üíª –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞</div>
"""
                for i, code in enumerate(topic.code_snippets, 1):
                    html += f'<div class="code-block">{code}</div>\n'
                html += "</div>\n"
            
            if topic.key_points:
                html += """
                <div class="section">
                    <div class="section-title">üéØ –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã</div>
"""
                for point in topic.key_points:
                    html += f'<div class="key-point">‚úì {point}</div>\n'
                html += "</div>\n"
            
            if topic.common_mistakes:
                html += """
                <div class="section">
                    <div class="section-title">‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏</div>
"""
                for mistake in topic.common_mistakes:
                    html += f'<div class="mistake">‚ö†Ô∏è {mistake}</div>\n'
                html += "</div>\n"
            
            if topic.best_practices:
                html += """
                <div class="section">
                    <div class="section-title">‚ú® –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏</div>
"""
                for practice in topic.best_practices:
                    html += f'<div class="best-practice">‚úì {practice}</div>\n'
                html += "</div>\n"
            
            if topic.practice_exercises:
                html += """
                <div class="section">
                    <div class="section-title">üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏</div>
"""
                for i, exercise in enumerate(topic.practice_exercises, 1):
                    html += f'<div class="exercise-item"><strong>–ó–∞–¥–∞–Ω–∏–µ {i}:</strong> {exercise}</div>\n'
                html += "</div>\n"
            
            if topic.quiz_questions:
                html += """
                <div class="section">
                    <div class="section-title">‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏</div>
"""
                for i, question in enumerate(topic.quiz_questions, 1):
                    html += f'<div class="question-item">{i}. {question}</div>\n'
                html += "</div>\n"
            
            if hasattr(topic, 'additional_resources') and topic.additional_resources:
                html += """
                <div class="section">
                    <div class="section-title">üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã</div>
"""
                for resource in topic.additional_resources:
                    html += f'<div class="resource">üîó {resource}</div>\n'
                html += "</div>\n"
            
            html += "</div>\n"
        
        html += f"""
        </div>
        
        <div class="footer">
            <p>–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')} | AI Course Builder</p>
            <p>–£—Ä–æ–∫: {lesson_content.lesson_title} | –ú–æ–¥—É–ª—å {lesson_content.module_number}</p>
        </div>
    </div>
</body>
</html>
"""
        return html
    
    def export_lesson_content_to_markdown(self, lesson_content) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞ –≤ Markdown"""
        from models import LessonContent
        
        md = f"# {lesson_content.lesson_title}\n\n"
        md += f"**–¶–µ–ª—å —É—Ä–æ–∫–∞:** {lesson_content.lesson_goal}\n\n"
        md += f"**–ú–æ–¥—É–ª—å:** {lesson_content.module_number} | **–£—Ä–æ–∫:** {lesson_content.lesson_number}\n"
        md += f"**–¢–µ–º:** {lesson_content.total_topics} | **–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è:** ~{lesson_content.total_estimated_time_minutes} –º–∏–Ω—É—Ç\n\n"
        md += "---\n\n"
        
        for idx, topic in enumerate(lesson_content.topics, 1):
            md += f"## –¢–µ–º–∞ {idx}: {topic.topic_title}\n\n"
            
            if hasattr(topic, 'topic_description'):
                md += f"*{topic.topic_description}*\n\n"
            
            md += f"‚è±Ô∏è –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: ~{topic.estimated_reading_time_minutes} –º–∏–Ω—É—Ç\n\n"
            
            md += f"### üìù –í–≤–µ–¥–µ–Ω–∏–µ\n\n"
            md += f"{topic.introduction}\n\n"
            
            md += f"### üìö –¢–µ–æ—Ä–∏—è\n\n"
            md += f"{topic.theory}\n\n"
            
            if topic.examples:
                md += f"### üí° –ü—Ä–∏–º–µ—Ä—ã\n\n"
                for i, example in enumerate(topic.examples, 1):
                    md += f"{i}. {example}\n\n"
            
            if topic.code_snippets:
                md += f"### üíª –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞\n\n"
                for code in topic.code_snippets:
                    md += f"```python\n{code}\n```\n\n"
            
            if topic.key_points:
                md += f"### üéØ –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã\n\n"
                for point in topic.key_points:
                    md += f"- ‚úì {point}\n"
                md += "\n"
            
            if topic.common_mistakes:
                md += f"### ‚ö†Ô∏è –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏\n\n"
                for mistake in topic.common_mistakes:
                    md += f"- ‚ö†Ô∏è {mistake}\n"
                md += "\n"
            
            if topic.best_practices:
                md += f"### ‚ú® –õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n"
                for practice in topic.best_practices:
                    md += f"- ‚úì {practice}\n"
                md += "\n"
            
            if topic.practice_exercises:
                md += f"### üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n"
                for i, exercise in enumerate(topic.practice_exercises, 1):
                    md += f"{i}. {exercise}\n"
                md += "\n"
            
            if topic.quiz_questions:
                md += f"### ‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏\n\n"
                for i, question in enumerate(topic.quiz_questions, 1):
                    md += f"{i}. {question}\n"
                md += "\n"
            
            if hasattr(topic, 'additional_resources') and topic.additional_resources:
                md += f"### üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n\n"
                for resource in topic.additional_resources:
                    md += f"- üîó {resource}\n"
                md += "\n"
            
            md += "---\n\n"
        
        md += f"\n*–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M')} | AI Course Builder*\n"
        return md
    
    def export_lesson_content_to_txt(self, lesson_content) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞ –≤ TXT"""
        from models import LessonContent
        
        txt = f"{'='*80}\n"
        txt += f"–î–ï–¢–ê–õ–¨–ù–´–ï –£–ß–ï–ë–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´\n"
        txt += f"{'='*80}\n\n"
        
        txt += f"–£–†–û–ö: {lesson_content.lesson_title}\n"
        txt += f"–¶–ï–õ–¨: {lesson_content.lesson_goal}\n"
        txt += f"–ú–û–î–£–õ–¨: {lesson_content.module_number} | –£–†–û–ö: {lesson_content.lesson_number}\n"
        txt += f"–¢–ï–ú: {lesson_content.total_topics} | –í–†–ï–ú–Ø: ~{lesson_content.total_estimated_time_minutes} –º–∏–Ω—É—Ç\n\n"
        txt += f"{'-'*80}\n\n"
        
        for idx, topic in enumerate(lesson_content.topics, 1):
            txt += f"\n{'='*80}\n"
            txt += f"–¢–ï–ú–ê {idx}: {topic.topic_title.upper()}\n"
            txt += f"{'='*80}\n\n"
            
            if hasattr(topic, 'topic_description'):
                txt += f"{topic.topic_description}\n\n"
            
            txt += f"–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: ~{topic.estimated_reading_time_minutes} –º–∏–Ω—É—Ç\n\n"
            
            txt += f"{'-'*80}\n"
            txt += f"–í–í–ï–î–ï–ù–ò–ï\n"
            txt += f"{'-'*80}\n\n"
            txt += f"{topic.introduction}\n\n"
            
            txt += f"{'-'*80}\n"
            txt += f"–¢–ï–û–†–ò–Ø\n"
            txt += f"{'-'*80}\n\n"
            txt += f"{topic.theory}\n\n"
            
            if topic.examples:
                txt += f"{'-'*80}\n"
                txt += f"–ü–†–ò–ú–ï–†–´\n"
                txt += f"{'-'*80}\n\n"
                for i, example in enumerate(topic.examples, 1):
                    txt += f"{i}. {example}\n\n"
            
            if topic.code_snippets:
                txt += f"{'-'*80}\n"
                txt += f"–ü–†–ò–ú–ï–†–´ –ö–û–î–ê\n"
                txt += f"{'-'*80}\n\n"
                for i, code in enumerate(topic.code_snippets, 1):
                    txt += f"–ü—Ä–∏–º–µ—Ä {i}:\n{code}\n\n"
            
            if topic.key_points:
                txt += f"{'-'*80}\n"
                txt += f"–ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´\n"
                txt += f"{'-'*80}\n\n"
                for point in topic.key_points:
                    txt += f"  ‚úì {point}\n"
                txt += "\n"
            
            if topic.common_mistakes:
                txt += f"{'-'*80}\n"
                txt += f"–ß–ê–°–¢–´–ï –û–®–ò–ë–ö–ò\n"
                txt += f"{'-'*80}\n\n"
                for mistake in topic.common_mistakes:
                    txt += f"  ‚ö† {mistake}\n"
                txt += "\n"
            
            if topic.best_practices:
                txt += f"{'-'*80}\n"
                txt += f"–õ–£–ß–®–ò–ï –ü–†–ê–ö–¢–ò–ö–ò\n"
                txt += f"{'-'*80}\n\n"
                for practice in topic.best_practices:
                    txt += f"  ‚úì {practice}\n"
                txt += "\n"
            
            if topic.practice_exercises:
                txt += f"{'-'*80}\n"
                txt += f"–£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –î–õ–Ø –ü–†–ê–ö–¢–ò–ö–ò\n"
                txt += f"{'-'*80}\n\n"
                for i, exercise in enumerate(topic.practice_exercises, 1):
                    txt += f"{i}. {exercise}\n"
                txt += "\n"
            
            if topic.quiz_questions:
                txt += f"{'-'*80}\n"
                txt += f"–í–û–ü–†–û–°–´ –î–õ–Ø –°–ê–ú–û–ü–†–û–í–ï–†–ö–ò\n"
                txt += f"{'-'*80}\n\n"
                for i, question in enumerate(topic.quiz_questions, 1):
                    txt += f"{i}. {question}\n"
                txt += "\n"
            
            if hasattr(topic, 'additional_resources') and topic.additional_resources:
                txt += f"{'-'*80}\n"
                txt += f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–°–£–†–°–´\n"
                txt += f"{'-'*80}\n\n"
                for resource in topic.additional_resources:
                    txt += f"  ‚Ä¢ {resource}\n"
                txt += "\n"
        
        txt += f"\n{'='*80}\n"
        txt += f"–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')} | AI Course Builder\n"
        txt += f"{'='*80}\n"
        
        return txt

