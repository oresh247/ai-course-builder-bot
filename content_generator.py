"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞
"""
import logging
import json
from typing import Optional, Dict, Any, List
from models import Module, Lecture, Slide, ModuleContent, Lesson, LessonContent, TopicMaterial
from openai_client import OpenAIClient
from prompts import (
    MODULE_CONTENT_SYSTEM_PROMPT,
    MODULE_CONTENT_PROMPT_TEMPLATE,
    TOPIC_MATERIAL_SYSTEM_PROMPT,
    TOPIC_MATERIAL_PROMPT_TEMPLATE,
    format_lessons_list
)

logger = logging.getLogger(__name__)


class ContentGenerator:
    """–ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª–µ–π"""
    
    def __init__(self):
        self.openai_client = OpenAIClient()
    
    def generate_module_content(self, module: Module, course_title: str, 
                               target_audience: str) -> Optional[ModuleContent]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–æ–¥—É–ª—è –≤–∫–ª—é—á–∞—è –ª–µ–∫—Ü–∏–∏ –∏ —Å–ª–∞–π–¥—ã
        
        –ü—Ä–æ–±—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤:
        1. Function Calling - —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π
        2. JSON mode - –ø—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä—ã–π
        3. –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - fallback
        4. –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - –µ—Å–ª–∏ –≤—Å–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–æ–¥—É–ª—è: {module.module_title}")
        
        # –ü–æ–ø—ã—Ç–∫–∞ 1: Function Calling (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
        result = self._try_function_calling(module, course_title, target_audience)
        if result:
            return result
        
        # –ü–æ–ø—ã—Ç–∫–∞ 2: JSON mode
        result = self._try_json_mode(module, course_title, target_audience)
        if result:
            return result
        
        # –ü–æ–ø—ã—Ç–∫–∞ 3: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        result = self._try_text_mode(module, course_title, target_audience)
        if result:
            return result
        
        # Fallback: –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        logger.warning("üìå –í—Å–µ –º–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        return self._get_test_module_content(module)
    
    def _try_function_calling(self, module: Module, course_title: str, 
                             target_audience: str) -> Optional[ModuleContent]:
        """–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Function Calling"""
        try:
            logger.info("üîß –ü—Ä–æ–±—É–µ–º Function Calling...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–∫—Ü–∏–π
            tools = [{
                "type": "function",
                "function": {
                    "name": "create_module_lectures",
                    "description": "–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ —Å–æ —Å–ª–∞–π–¥–∞–º–∏ –¥–ª—è —É—á–µ–±–Ω–æ–≥–æ –º–æ–¥—É–ª—è",
                    "parameters": {
                        "type": "object",
                        "properties": {
                            "lectures": {
                                "type": "array",
                                "description": "–ú–∞—Å—Å–∏–≤ –ª–µ–∫—Ü–∏–π –¥–ª—è –º–æ–¥—É–ª—è",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "lecture_title": {"type": "string"},
                                        "duration_minutes": {"type": "integer"},
                                        "learning_objectives": {
                                            "type": "array",
                                            "items": {"type": "string"}
                                        },
                                        "key_takeaways": {
                                            "type": "array",
                                            "items": {"type": "string"}
                                        },
                                        "slides": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "slide_number": {"type": "integer"},
                                                    "title": {"type": "string"},
                                                    "content": {"type": "string"},
                                                    "slide_type": {"type": "string"},
                                                    "code_example": {"type": ["string", "null"]},
                                                    "notes": {"type": "string"}
                                                },
                                                "required": ["slide_number", "title", "content", "slide_type", "notes"]
                                            }
                                        }
                                    },
                                    "required": ["lecture_title", "duration_minutes", "learning_objectives", "key_takeaways", "slides"]
                                }
                            }
                        },
                        "required": ["lectures"]
                    }
                }
            }]
            
            from prompts import MODULE_CONTENT_PROMPT_TEMPLATE, MODULE_CONTENT_SYSTEM_PROMPT, format_lessons_list
            
            prompt = MODULE_CONTENT_PROMPT_TEMPLATE.format(
                course_title=course_title,
                target_audience=target_audience,
                module_number=module.module_number,
                module_title=module.module_title,
                module_goal=module.module_goal,
                lessons_list=format_lessons_list(module.lessons),
                num_lessons=len(module.lessons)
            )
            
            response = self.openai_client.client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=[
                    {"role": "system", "content": MODULE_CONTENT_SYSTEM_PROMPT},
                    {"role": "user", "content": prompt}
                ],
                tools=tools,
                tool_choice={"type": "function", "function": {"name": "create_module_lectures"}},
                temperature=0.3
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
            tool_call = response.choices[0].message.tool_calls[0]
            function_args = json.loads(tool_call.function.arguments)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π JSON
            json_content = {
                "module_number": module.module_number,
                "module_title": module.module_title,
                "lectures": function_args["lectures"]
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π –ª–µ–∫—Ü–∏–∏
            for lecture in json_content["lectures"]:
                lecture["module_number"] = module.module_number
                lecture["module_title"] = module.module_title
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_slides = sum(len(lecture["slides"]) for lecture in json_content["lectures"])
            total_duration = sum(lecture["duration_minutes"] for lecture in json_content["lectures"])
            
            json_content["total_slides"] = total_slides
            json_content["estimated_duration_minutes"] = total_duration
            
            module_content = ModuleContent(**json_content)
            logger.info(f"‚úÖ Function Calling —É—Å–ø–µ—à–Ω–æ: {len(module_content.lectures)} –ª–µ–∫—Ü–∏–π, {total_slides} —Å–ª–∞–π–¥–æ–≤")
            return module_content
            
        except Exception as e:
            logger.warning(f"‚ùå Function Calling –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return None
    
    def _try_json_mode(self, module: Module, course_title: str, 
                       target_audience: str) -> Optional[ModuleContent]:
        """–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ JSON mode"""
        try:
            logger.info("üîß –ü—Ä–æ–±—É–µ–º JSON mode...")
            
            from prompts import MODULE_CONTENT_PROMPT_TEMPLATE, MODULE_CONTENT_SYSTEM_PROMPT, format_lessons_list
            
            prompt = MODULE_CONTENT_PROMPT_TEMPLATE.format(
                course_title=course_title,
                target_audience=target_audience,
                module_number=module.module_number,
                module_title=module.module_title,
                module_goal=module.module_goal,
                lessons_list=format_lessons_list(module.lessons),
                num_lessons=len(module.lessons)
            )
            
            response = self.openai_client.client.chat.completions.create(
                model="gpt-4-turbo-preview",
                messages=[
                    {"role": "system", "content": MODULE_CONTENT_SYSTEM_PROMPT + "\n\n–í–´–í–û–î –¢–û–õ–¨–ö–û –í JSON –§–û–†–ú–ê–¢–ï!"},
                    {"role": "user", "content": prompt}
                ],
                response_format={"type": "json_object"},
                temperature=0.3,
                max_tokens=8000
            )
            
            content = response.choices[0].message.content.strip()
            json_content = self._extract_json(content)
            
            if json_content and "lectures" in json_content:
                total_slides = sum(len(lecture.get("slides", [])) for lecture in json_content["lectures"])
                total_duration = sum(lecture.get("duration_minutes", 0) for lecture in json_content["lectures"])
                
                json_content["total_slides"] = total_slides
                json_content["estimated_duration_minutes"] = total_duration
                
                module_content = ModuleContent(**json_content)
                logger.info(f"‚úÖ JSON mode —É—Å–ø–µ—à–Ω–æ: {len(module_content.lectures)} –ª–µ–∫—Ü–∏–π, {total_slides} —Å–ª–∞–π–¥–æ–≤")
                return module_content
            else:
                logger.warning("‚ùå JSON mode –≤–µ—Ä–Ω—É–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                return None
                
        except Exception as e:
            logger.warning(f"‚ùå JSON mode –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return None
    
    def _try_text_mode(self, module: Module, course_title: str, 
                       target_audience: str) -> Optional[ModuleContent]:
        """–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            logger.info("üîß –ü—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º...")
            
            from prompts import MODULE_CONTENT_PROMPT_TEMPLATE, MODULE_CONTENT_SYSTEM_PROMPT, format_lessons_list
            
            prompt = MODULE_CONTENT_PROMPT_TEMPLATE.format(
                course_title=course_title,
                target_audience=target_audience,
                module_number=module.module_number,
                module_title=module.module_title,
                module_goal=module.module_goal,
                lessons_list=format_lessons_list(module.lessons),
                num_lessons=len(module.lessons)
            )
            
            response = self.openai_client.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": MODULE_CONTENT_SYSTEM_PROMPT},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.3,
                max_tokens=8000
            )
            
            content = response.choices[0].message.content.strip()
            json_content = self._extract_json(content)
            
            if json_content and "lectures" in json_content:
                total_slides = sum(len(lecture.get("slides", [])) for lecture in json_content["lectures"])
                total_duration = sum(lecture.get("duration_minutes", 0) for lecture in json_content["lectures"])
                
                json_content["total_slides"] = total_slides
                json_content["estimated_duration_minutes"] = total_duration
                
                module_content = ModuleContent(**json_content)
                logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ: {len(module_content.lectures)} –ª–µ–∫—Ü–∏–π, {total_slides} —Å–ª–∞–π–¥–æ–≤")
                return module_content
            else:
                logger.warning("‚ùå –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–µ—Ä–Ω—É–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                return None
                
        except Exception as e:
            logger.warning(f"‚ùå –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return None
    
    def _extract_json(self, content: str) -> Optional[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        try:
            # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            content = content.replace('```json', '').replace('```', '')
            content = content.strip()
            
            # –ò—â–µ–º JSON –±–ª–æ–∫
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            
            if start_idx == -1 or end_idx <= start_idx:
                logger.error("JSON –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
            
            json_str = content[start_idx:end_idx]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –Ω–µ –æ–±—Ä–µ–∑–∞–Ω
            if not json_str.endswith('}'):
                logger.error("JSON –æ–±—Ä–µ–∑–∞–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
                return None
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            parsed = json.loads(json_str)
            
            # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏—à–ª–∞
            if 'lectures' in parsed and isinstance(parsed['lectures'], list):
                # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å 'lectures'")
                if len(parsed['lectures']) == 0:
                    logger.error("–í JSON –Ω–µ—Ç –ª–µ–∫—Ü–∏–π (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)")
                    return None
                return parsed
                
            elif 'lesson_title' in parsed:
                # üîÑ OpenAI –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É –£–†–û–ö–ê - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –õ–ï–ö–¶–ò–Æ!
                logger.warning("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ –ª–µ–∫—Ü–∏–π. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º...")
                return self._convert_lesson_to_lectures(parsed)
            
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(parsed.keys())}")
                logger.debug(f"–ü–æ–ª–Ω—ã–π JSON: {parsed}")
                return None
                
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: {content[:500]}...")
            return None
    
    def _extract_lesson_json(self, content: str) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —É—Ä–æ–∫–∞ (Lesson)
        –ï—Å–ª–∏ OpenAI –≤–µ—Ä–Ω—É–ª lectures - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ lesson
        """
        try:
            # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            content = content.replace('```json', '').replace('```', '')
            content = content.strip()
            
            # –ò—â–µ–º JSON –±–ª–æ–∫
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            
            if start_idx == -1 or end_idx <= start_idx:
                logger.error("JSON –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
            
            json_str = content[start_idx:end_idx]
            parsed = json.loads(json_str)
            
            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ lesson - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            if 'lesson_title' in parsed and 'lesson_goal' in parsed:
                logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞ (lesson)")
                return parsed
            
            # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ lectures - –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ª–µ–∫—Ü–∏—é –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ lesson
            elif 'lectures' in parsed and len(parsed['lectures']) > 0:
                logger.warning("‚ö†Ô∏è OpenAI –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É lectures –≤–º–µ—Å—Ç–æ lesson. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ...")
                return self._convert_lecture_to_lesson(parsed['lectures'][0])
            
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –¥–ª—è —É—Ä–æ–∫–∞. –ö–ª—é—á–∏: {list(parsed.keys())}")
                return None
                
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è JSON —É—Ä–æ–∫–∞: {e}")
            return None
    
    def _convert_lecture_to_lesson(self, lecture_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–µ–∫—Ü–∏–∏ (lecture) –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—Ä–æ–∫–∞ (lesson)
        
        –ü–æ–ª—É—á–∞–µ–º:
        {
          "lecture_title": "...",
          "slides": [...]
        }
        
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤:
        {
          "lesson_title": "...",
          "lesson_goal": "...",
          "content_outline": [...]
        }
        """
        try:
            logger.info("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–µ–∫—Ü–∏—é –æ–±—Ä–∞—Ç–Ω–æ –≤ —É—Ä–æ–∫...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–µ–∫—Ü–∏–∏
            lesson_title = lecture_data.get("lecture_title", "–£—Ä–æ–∫ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            duration = lecture_data.get("duration_minutes", 45)
            learning_objectives = lecture_data.get("learning_objectives", [])
            slides = lecture_data.get("slides", [])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª—å —É—Ä–æ–∫–∞ –∏–∑ learning_objectives
            if learning_objectives:
                lesson_goal = " ".join(learning_objectives)
            else:
                lesson_goal = f"–ò–∑—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ: {lesson_title}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Å–ª–∞–π–¥–æ–≤
            content_outline = []
            for slide in slides:
                slide_type = slide.get("slide_type", "content")
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º title –∏ summary —Å–ª–∞–π–¥—ã
                if slide_type not in ["title", "summary"]:
                    content_outline.append(slide.get("title", "–ü—É–Ω–∫—Ç –ø–ª–∞–Ω–∞"))
            
            # –ï—Å–ª–∏ —Å–ª–∞–π–¥–æ–≤ –Ω–µ –±—ã–ª–æ –∏–ª–∏ –≤—Å–µ –±—ã–ª–∏ title/summary, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
            if not content_outline:
                content_outline = [
                    "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã",
                    "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã",
                    "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è"
                ]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ —Å–ª–∞–π–¥–æ–≤
            has_code = any(s.get("slide_type") == "code" for s in slides)
            has_quiz = any(s.get("slide_type") == "quiz" for s in slides)
            
            if has_code:
                format_type = "practice"
            elif has_quiz:
                format_type = "quiz"
            else:
                format_type = "theory"
            
            lesson = {
                "lesson_title": lesson_title,
                "lesson_goal": lesson_goal,
                "estimated_time_minutes": duration,
                "format": format_type,
                "assessment": "–¢–µ—Å—Ç" if has_quiz else "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ" if has_code else "–û–ø—Ä–æ—Å",
                "content_outline": content_outline
            }
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–∫ —Å {len(content_outline)} –ø—É–Ω–∫—Ç–∞–º–∏ –ø–ª–∞–Ω–∞")
            return lesson
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ª–µ–∫—Ü–∏–∏ –≤ —É—Ä–æ–∫: {e}")
            return None
    
    def _extract_topic_json(self, content: str) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è TopicMaterial
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ç–µ–º–µ
        """
        try:
            # –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            content = content.replace('```json', '').replace('```', '')
            content = content.strip()
            
            # –ò—â–µ–º JSON –±–ª–æ–∫
            start_idx = content.find('{')
            end_idx = content.rfind('}') + 1
            
            if start_idx == -1 or end_idx <= start_idx:
                logger.error("JSON –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
            
            json_str = content[start_idx:end_idx]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ JSON –Ω–µ –æ–±—Ä–µ–∑–∞–Ω
            if not json_str.endswith('}'):
                logger.error("JSON –æ–±—Ä–µ–∑–∞–Ω –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω")
                return None
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            parsed = json.loads(json_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ TopicMaterial
            required_fields = ['topic_title', 'topic_number', 'introduction', 'theory', 
                             'examples', 'key_points', 'common_mistakes', 'best_practices',
                             'practice_exercises', 'quiz_questions', 'estimated_reading_time_minutes']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
            missing_fields = [field for field in required_fields if field not in parsed]
            
            if missing_fields:
                logger.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing_fields}")
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                if 'code_snippets' not in parsed:
                    parsed['code_snippets'] = []
                if 'additional_resources' not in parsed:
                    parsed['additional_resources'] = []
                
                # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                critical_missing = [f for f in missing_fields if f in ['topic_title', 'topic_number', 'introduction', 'theory']]
                if critical_missing:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è: {critical_missing}")
                    return None
            
            logger.info("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω JSON –¥–ª—è TopicMaterial")
            return parsed
                
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è —Ç–æ–ø–∏–∫–∞: {e}")
            logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: {content[:500]}...")
            return None
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ topic JSON: {e}")
            return None
    
    def _convert_lesson_to_lectures(self, lesson_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—Ä–æ–∫–∞ (lesson) –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–µ–∫—Ü–∏–π (lectures)
        
        OpenAI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        {
          "lesson_title": "...",
          "lesson_goal": "...",
          "content_outline": [...]
        }
        
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤:
        {
          "lectures": [
            {
              "lecture_title": "...",
              "slides": [...]
            }
          ]
        }
        """
        try:
            logger.info("üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É—Ä–æ–∫ –≤ –ª–µ–∫—Ü–∏—é —Å–æ —Å–ª–∞–π–¥–∞–º–∏...")
            
            # –°–æ–∑–¥–∞–µ–º –ª–µ–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–∫–∞
            lecture = {
                "lecture_title": lesson_data.get("lesson_title", "–õ–µ–∫—Ü–∏—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),
                "duration_minutes": lesson_data.get("estimated_time_minutes", 45),
                "learning_objectives": [
                    lesson_data.get("lesson_goal", "–ò–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"),
                    "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∑–Ω–∞–Ω–∏—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ",
                    "–ó–∞–∫—Ä–µ–ø–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —á–µ—Ä–µ–∑ –ø—Ä–∏–º–µ—Ä—ã"
                ],
                "key_takeaways": [],
                "slides": []
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–∞–π–¥—ã –∏–∑ content_outline
            content_outline = lesson_data.get("content_outline", [])
            
            # –°–ª–∞–π–¥ 1: –ó–∞–≥–ª–∞–≤–Ω—ã–π
            lecture["slides"].append({
                "slide_number": 1,
                "title": lecture["lecture_title"],
                "content": lesson_data.get("lesson_goal", "–ò–∑—É—á–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Ç–µ–º—ã"),
                "slide_type": "title",
                "code_example": None,
                "notes": "–ù–∞—á–Ω–∏—Ç–µ —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã –∏ —Ü–µ–ª–µ–π —É—Ä–æ–∫–∞"
            })
            
            # –°–ª–∞–π–¥—ã 2-N: –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑ outline
            for i, topic in enumerate(content_outline, start=2):
                slide_type = "content"
                code_example = None
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–ª–∞–π–¥–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
                if "–∫–æ–¥" in topic.lower() or "–ø—Ä–∏–º–µ—Ä" in topic.lower():
                    slide_type = "code"
                    code_example = f"# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è: {topic}\n# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å"
                elif "–¥–∏–∞–≥—Ä–∞–º–º" in topic.lower() or "—Å—Ö–µ–º" in topic.lower():
                    slide_type = "diagram"
                
                lecture["slides"].append({
                    "slide_number": i,
                    "title": topic,
                    "content": f"–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Ç–µ–º—ã:\n‚Ä¢ {topic}\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã",
                    "slide_type": slide_type,
                    "code_example": code_example,
                    "notes": f"–ü–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç–µ: {topic}"
                })
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–∞–π–¥: –ò—Ç–æ–≥–∏
            lecture["slides"].append({
                "slide_number": len(lecture["slides"]) + 1,
                "title": "–ò—Ç–æ–≥–∏",
                "content": f"‚úÖ –ò–∑—É—á–∏–ª–∏: {lecture['lecture_title']}\n‚úÖ –†–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n‚úÖ –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ",
                "slide_type": "summary",
                "code_example": None,
                "notes": "–ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
            })
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º key_takeaways
            lecture["key_takeaways"] = [
                f"–ü–æ–Ω–∏–º–∞–Ω–∏–µ: {lecture['lecture_title']}",
                "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π",
                "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–º–∞–º"
            ]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ª–µ–∫—Ü–∏—è —Å {len(lecture['slides'])} —Å–ª–∞–π–¥–∞–º–∏")
            return {
                "lectures": [lecture]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞ –≤ –ª–µ–∫—Ü–∏—é: {e}")
            return None
    
    def _get_test_module_content(self, module: Module) -> ModuleContent:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        lectures = []
        
        for i, lesson in enumerate(module.lessons, 1):
            slides = [
                Slide(
                    slide_number=1,
                    title=f"{lesson.lesson_title}",
                    content=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —É—Ä–æ–∫ –ø–æ {lesson.lesson_title}",
                    slide_type="title",
                    notes="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–º—É"
                ),
                Slide(
                    slide_number=2,
                    title="–¶–µ–ª–∏ —É—Ä–æ–∫–∞",
                    content=f"‚Ä¢ {lesson.lesson_goal}\n‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ\n‚Ä¢ –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞",
                    slide_type="content",
                    notes="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ü–µ–ª—è—Ö —É—Ä–æ–∫–∞"
                ),
                Slide(
                    slide_number=3,
                    title="–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å",
                    content="‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏\n‚Ä¢ –í–∞–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã\n‚Ä¢ –ü—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã",
                    slide_type="content",
                    notes="–û–±—ä—è—Å–Ω–∏—Ç–µ —Ç–µ–æ—Ä–∏—é —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"
                ),
                Slide(
                    slide_number=4,
                    title="–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞",
                    content="–†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä",
                    slide_type="code",
                    code_example="# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞\nprint('Hello, World!')",
                    notes="–†–∞–∑–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ"
                ),
                Slide(
                    slide_number=5,
                    title="–ò—Ç–æ–≥–∏",
                    content=f"‚Ä¢ –ò–∑—É—á–∏–ª–∏ {lesson.lesson_title}\n‚Ä¢ –†–∞–∑–æ–±—Ä–∞–ª–∏ –ø—Ä–∏–º–µ—Ä—ã\n‚Ä¢ –ì–æ—Ç–æ–≤—ã –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ",
                    slide_type="summary",
                    notes="–ü–æ–¥–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–∏ —É—Ä–æ–∫–∞"
                )
            ]
            
            lecture = Lecture(
                lecture_title=lesson.lesson_title,
                module_number=module.module_number,
                module_title=module.module_title,
                duration_minutes=lesson.estimated_time_minutes,
                slides=slides,
                learning_objectives=[lesson.lesson_goal],
                key_takeaways=[f"–û—Å–Ω–æ–≤—ã {lesson.lesson_title}"]
            )
            
            lectures.append(lecture)
        
        return ModuleContent(
            module_number=module.module_number,
            module_title=module.module_title,
            lectures=lectures,
            total_slides=sum(len(lecture.slides) for lecture in lectures),
            estimated_duration_minutes=sum(lecture.duration_minutes for lecture in lectures)
        )
    
    def generate_lesson_detailed_content(self, lesson: Lesson, module_number: int, 
                                        course_title: str, module_title: str,
                                        target_audience: str) -> Optional[LessonContent]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã —É—Ä–æ–∫–∞
        
        Args:
            lesson: –£—Ä–æ–∫ —Å –ø–ª–∞–Ω–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            module_number: –ù–æ–º–µ—Ä –º–æ–¥—É–ª—è
            course_title: –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            module_title: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
            target_audience: –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
            
        Returns:
            LessonContent —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
        """
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —É—Ä–æ–∫–∞: {lesson.lesson_title}")
        logger.info(f"–¢–µ–º—ã –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏: {len(lesson.content_outline)}")
        
        topics = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã –∏–∑ –ø–ª–∞–Ω–∞
        for topic_number, topic_title in enumerate(lesson.content_outline, start=1):
            logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ç–µ–º—ã {topic_number}/{len(lesson.content_outline)}: {topic_title}")
            
            topic_material = self._generate_topic_material(
                topic_number=topic_number,
                topic_title=topic_title,
                lesson=lesson,
                module_number=module_number,
                course_title=course_title,
                module_title=module_title,
                target_audience=target_audience
            )
            
            if topic_material:
                topics.append(topic_material)
            else:
                # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
                topics.append(self._get_test_topic_material(topic_number, topic_title))
        
        if not topics:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ —Ç–µ–º–∞–º")
            return None
        
        total_time = sum(topic.estimated_reading_time_minutes for topic in topics)
        
        lesson_content = LessonContent(
            lesson_title=lesson.lesson_title,
            lesson_goal=lesson.lesson_goal,
            lesson_number=1,  # TODO: –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏–∑–≤–Ω–µ
            module_number=module_number,
            topics=topics,
            total_topics=len(topics),
            total_estimated_time_minutes=total_time
        )
        
        logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {len(topics)} —Ç–µ–º, ~{total_time} –º–∏–Ω")
        return lesson_content
    
    def _generate_topic_material(self, topic_number: int, topic_title: str,
                                lesson: Lesson, module_number: int,
                                course_title: str, module_title: str,
                                target_audience: str) -> Optional[TopicMaterial]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –æ–¥–Ω–æ–π —Ç–µ–º—ã"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = TOPIC_MATERIAL_PROMPT_TEMPLATE.format(
                course_title=course_title,
                target_audience=target_audience,
                module_title=module_title,
                lesson_title=lesson.lesson_title,
                lesson_goal=lesson.lesson_goal,
                topic_number=topic_number,
                topic_title=topic_title
            )
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            response = None
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: JSON mode
            try:
                response = self.openai_client.client.chat.completions.create(
                    model="gpt-4-turbo-preview",
                    messages=[
                        {"role": "system", "content": TOPIC_MATERIAL_SYSTEM_PROMPT},
                        {"role": "user", "content": prompt}
                    ],
                    response_format={"type": "json_object"},
                    temperature=0.7,
                    max_tokens=4000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                )
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º JSON mode –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã")
            except Exception as e:
                logger.warning(f"JSON mode –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                # –ü–æ–ø—ã—Ç–∫–∞ 2: –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
                response = self.openai_client.client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": TOPIC_MATERIAL_SYSTEM_PROMPT},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.7,
                    max_tokens=4000
                )
            
            if not response:
                return None
            
            content = response.choices[0].message.content.strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –¥–ª—è TopicMaterial
            json_content = self._extract_topic_json(content)
            
            if not json_content:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JSON –¥–ª—è —Ç–µ–º—ã: {topic_title}")
                return None
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç TopicMaterial
            topic_material = TopicMaterial(**json_content)
            logger.info(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ–∑–¥–∞–Ω: {len(topic_material.examples)} –ø—Ä–∏–º–µ—Ä–æ–≤, {len(topic_material.quiz_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
            return topic_material
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è —Ç–µ–º—ã '{topic_title}': {e}")
            return None
    
    def _get_test_topic_material(self, topic_number: int, topic_title: str) -> TopicMaterial:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ"""
        return TopicMaterial(
            topic_title=topic_title,
            topic_number=topic_number,
            introduction=f"""
            {topic_title} ‚Äî —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–Ω–∏–º–∞—Ç—å –∫–∞–∂–¥–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É. 
            
            –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã —Ç–µ–º—ã, –Ω–∞—á–∏–Ω–∞—è —Å –æ—Å–Ω–æ–≤ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏. –í—ã —É–∑–Ω–∞–µ—Ç–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã, –Ω–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.
            
            –ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ –≤ —Ç–µ–º—É ‚Äî –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∫ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º. –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏.
            """,
            theory=f"""
            –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π {topic_title}.
            
            –û—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —ç—Ç–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è/–∫–æ–Ω—Ü–µ–ø—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ—à–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –∑–∞–¥–∞—á –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ. –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —ç—Ç–∞ —Ç–µ–º–∞ —Ä–∞–∑–≤–∏–≤–∞–ª–∞—Å—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
            
            –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –±–∞–∑–∏—Ä—É—é—Ç—Å—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏—è—Ö. –í–æ-–ø–µ—Ä–≤—ã—Ö, –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –í–æ-–≤—Ç–æ—Ä—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–Ω–∞—Ç—å, –∫–∞–∫ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –º–µ–∂–¥—É —Å–æ–±–æ–π.
            
            –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö –∑–Ω–∞–Ω–∏–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–µ, –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è. –≠—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≥–¥–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–¥–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—Ç—É—Ç.
            
            –ü–æ–Ω–∏–º–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ —Ä–∞–±–æ—Ç—ã –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.
            """,
            examples=[
                f"–ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {topic_title}. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π —Å–ª—É—á–∞–π, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é.",
                f"–ü—Ä–∏–º–µ—Ä 2: –ë–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å {topic_title}. –ó–¥–µ—Å—å –º—ã –≤–∏–¥–∏–º, –∫–∞–∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏.",
                f"–ü—Ä–∏–º–µ—Ä 3: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {topic_title}. –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.",
                f"–ü—Ä–∏–º–µ—Ä 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è {topic_title} —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.",
                f"–ü—Ä–∏–º–µ—Ä 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ edge cases –∏ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å {topic_title}."
            ],
            code_snippets=[
                f"# –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è {topic_title}\n# –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥\nresult = perform_operation()\nprint(result)",
                f"# –ë–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä\n# –° –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π\ntry:\n    result = advanced_operation()\n    process_result(result)\nexcept Exception as e:\n    handle_error(e)",
                f"# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞\n# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏\nclass Example:\n    def __init__(self):\n        self.data = initialize_data()\n    \n    def process(self):\n        return transform_data(self.data)"
            ],
            key_points=[
                f"–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è {topic_title} –±–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–µ...",
                "–í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–¥—Ö–æ–¥–∞–º–∏",
                "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö",
                "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É",
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–∞—è —á–∞—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏",
                "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"
            ],
            common_mistakes=[
                "–û—à–∏–±–∫–∞ 1: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π. –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.",
                "–û—à–∏–±–∫–∞ 2: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫. –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.",
                "–û—à–∏–±–∫–∞ 3: –ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ.",
                "–û—à–∏–±–∫–∞ 4: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–∫—Ä—ã–≤–∞–π—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.",
                "–û—à–∏–±–∫–∞ 5: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –±–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏—è. –í—Å–µ–≥–¥–∞ –ø–æ–Ω–∏–º–∞–π—Ç–µ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."
            ],
            best_practices=[
                "–ü—Ä–∞–∫—Ç–∏–∫–∞ 1: –°–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º —á–∏—Å—Ç–æ–≥–æ –∫–æ–¥–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö",
                "–ü—Ä–∞–∫—Ç–∏–∫–∞ 2: –†–∞–∑–±–∏–≤–∞–π—Ç–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                "–ü—Ä–∞–∫—Ç–∏–∫–∞ 3: –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É",
                "–ü—Ä–∞–∫—Ç–∏–∫–∞ 4: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ type hints –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫",
                "–ü—Ä–∞–∫—Ç–∏–∫–∞ 5: –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç–µ code review –∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞"
            ],
            practice_exercises=[
                f"–ó–∞–¥–∞–Ω–∏–µ 1: –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â—É—é –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {topic_title}",
                f"–ó–∞–¥–∞–Ω–∏–µ 2: –†–∞—Å—à–∏—Ä—å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫",
                f"–ó–∞–¥–∞–Ω–∏–µ 3: –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                f"–ó–∞–¥–∞–Ω–∏–µ 4: –ù–∞–ø–∏—à–∏—Ç–µ unit-—Ç–µ—Å—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –∫–æ–¥–∞",
                f"–ó–∞–¥–∞–Ω–∏–µ 5: –°–æ–∑–¥–∞–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–æ–µ–∫—Ç, –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—â–∏–π {topic_title} —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏"
            ],
            quiz_questions=[
                f"–í–æ–ø—Ä–æ—Å 1: –ß—Ç–æ —Ç–∞–∫–æ–µ {topic_title} –∏ –∑–∞—á–µ–º —ç—Ç–æ –Ω—É–∂–Ω–æ?",
                f"–í–æ–ø—Ä–æ—Å 2: –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—Ö–æ–¥—è—Ç –≤ {topic_title}?",
                f"–í–æ–ø—Ä–æ—Å 3: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–æ–º A –∏ –ø–æ–¥—Ö–æ–¥–æ–º B?",
                f"–í–æ–ø—Ä–æ—Å 4: –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–∞–µ—Ç {topic_title}?",
                f"–í–æ–ø—Ä–æ—Å 5: –ö–æ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {topic_title}, –∞ –∫–æ–≥–¥–∞ –Ω–µ—Ç?",
                f"–í–æ–ø—Ä–æ—Å 6: –ö–∞–∫–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã {topic_title}?",
                f"–í–æ–ø—Ä–æ—Å 7: –ö–∞–∫ –æ—Ç–ª–∞–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å {topic_title}?"
            ],
            additional_resources=[
                "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (—Å—Å—ã–ª–∫–∞)",
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–Ω–∏–≥–∞ –ø–æ —Ç–µ–º–µ",
                "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ —Ç—É—Ç–æ—Ä–∏–∞–ª—ã",
                "–í–∏–¥–µ–æ-–∫—É—Ä—Å—ã –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è"
            ],
            estimated_reading_time_minutes=25
        )

