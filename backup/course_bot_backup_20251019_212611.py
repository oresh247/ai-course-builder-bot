# ---------- SSL FIX –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–π ----------
import os
os.environ['PYTHONHTTPSVERIFY'] = '0'
os.environ['CURL_CA_BUNDLE'] = ''
os.environ['REQUESTS_CA_BUNDLE'] = ''

import ssl
ssl._create_default_https_context = ssl._create_unverified_context
# ----------------------------------------------------

import logging
import json
from typing import Optional
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import httpx

from models import Course, Module, Lesson, UserSession, DifficultyLevel, ModuleContent, Lecture, Slide
from openai_client import OpenAIClient
from exporters import CourseExporter
from content_generator import ContentGenerator
from prompts import (
    LESSON_REGENERATION_SYSTEM_PROMPT,
    LESSON_REGENERATION_PROMPT_TEMPLATE,
    LECTURE_REGENERATION_SYSTEM_PROMPT,
    LECTURE_REGENERATION_PROMPT_TEMPLATE,
    SLIDE_REGENERATION_SYSTEM_PROMPT,
    SLIDE_REGENERATION_PROMPT_TEMPLATE,
    format_content_outline,
    format_custom_requirements
)

# ---------- –ó–ê–ì–†–£–ó–ö–ê ----------
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ---------- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ----------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------- –•–†–ê–ù–ò–õ–ò–©–ï –°–ï–°–°–ò–ô ----------
user_sessions = {}

# ---------- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ----------
openai_client = OpenAIClient()
course_exporter = CourseExporter()
content_generator = ContentGenerator()


# ---------- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession(user_id=user_id)
    
    logger.info(f"/start –æ—Ç {update.effective_user.first_name}")
    await update.message.reply_text(
        "ü§ñ <b>AI Course Builder</b>\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É IT-–∫—É—Ä—Å–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å\n"
        "/view - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å\n"
        "/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏\n\n"
        "<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>\n"
        "/generate - —Å–æ–∑–¥–∞—Ç—å –ª–µ–∫—Ü–∏–∏ –∏ —Å–ª–∞–π–¥—ã\n"
        "/regenerate - –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫—Ü–∏–∏/—Å–ª–∞–π–¥—ã\n"
        "/regenerate_lesson - –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫–∏\n"
        "/generate_topics - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–∞–º\n\n"
        "<b>–≠–∫—Å–ø–æ—Ä—Ç:</b>\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å (JSON/HTML/MD/TXT)\n\n"
        "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode="HTML"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞"""
    await update.message.reply_text(
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "<b>/create</b> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å\n"
        "–ë–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å:\n"
        "‚Ä¢ –¢–µ–º—É –∫—É—Ä—Å–∞\n"
        "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å (junior/middle/senior)\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π (3-10)\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
        "<b>/view</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—É—Ä—Å–∞\n\n"
        "<b>/edit</b> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –ú–æ–¥—É–ª–∏ –∏ —É—Ä–æ–∫–∏\n"
        "‚Ä¢ –¶–µ–ª–∏ –∏ –æ—Ü–µ–Ω–∫–∏\n\n"
        "<b>/generate</b> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ª–µ–∫—Ü–∏–∏, —Å–ª–∞–π–¥—ã)\n\n"
        "<b>/regenerate</b> - –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫—Ü–∏–∏ –∏ —Å–ª–∞–π–¥—ã\n\n"
        "<b>/regenerate_lesson</b> - –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ä–æ–∫ –º–æ–¥—É–ª—è\n\n"
        "<b>/generate_topics</b> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –ø–ª–∞–Ω–∞ —É—Ä–æ–∫–∞\n\n"
        "<b>/export</b> - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ JSON/HTML/Markdown/TXT\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "–°–æ–∑–¥–∞–π –∫—É—Ä—Å –ø–æ Python –¥–ª—è junior",
        parse_mode="HTML"
    )


async def create_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞"""
    user_id = update.effective_user.id
    
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession(user_id=user_id)
    
    session = user_sessions[user_id]
    session.editing_mode = True
    session.editing_path = "awaiting_level"
    
    keyboard = [
        [InlineKeyboardButton("Junior", callback_data="level_junior")],
        [InlineKeyboardButton("Middle", callback_data="level_middle")],
        [InlineKeyboardButton("Senior", callback_data="level_senior")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def view_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞"""
    user_id = update.effective_user.id
    
    if user_id not in user_sessions or not user_sessions[user_id].current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    course = user_sessions[user_id].current_course
    text = f"üéì <b>{course.course_title}</b>\n\n"
    text += f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {course.target_audience}\n"
    
    if course.duration_weeks:
        text += f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {course.duration_weeks} –Ω–µ–¥–µ–ª—å\n"
    if course.duration_hours:
        text += f"üìö <b>–ß–∞—Å–æ–≤:</b> {course.duration_hours}\n"
    
    text += f"\n<b>–ú–æ–¥—É–ª–∏ ({len(course.modules)}):</b>\n\n"
    
    keyboard = []
    for i, module in enumerate(course.modules, 1):
        text += f"<b>{i}. {module.module_title}</b>\n"
        text += f"<i>{module.module_goal}</i>\n"
        text += f"–£—Ä–æ–∫–æ–≤: {len(module.lessons)}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥—É–ª—è
        keyboard.append([InlineKeyboardButton(
            f"üëÅÔ∏è {i}. –î–µ—Ç–∞–ª–∏ –º–æ–¥—É–ª—è: {module.module_title[:30]}",
            callback_data=f"view_module_{i-1}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def edit_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞"""
    user_id = update.effective_user.id
    
    if user_id not in user_sessions or not user_sessions[user_id].current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    course = user_sessions[user_id].current_course
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:</b> {course.course_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    
    keyboard = []
    for i, module in enumerate(course.modules):
        text += f"{i+1}. {module.module_title}\n"
        keyboard.append([InlineKeyboardButton(
            f"{i+1}. {module.module_title[:40]}", 
            callback_data=f"edit_mod_{i}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data="back_to_course")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def generate_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥—É–ª—è"""
    user_id = update.effective_user.id
    
    if user_id not in user_sessions or not user_sessions[user_id].current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫—É—Ä—Å —Å –ø–æ–º–æ—â—å—é /create")
        return
    
    course = user_sessions[user_id].current_course
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    text = f"üìù <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
    text += f"–ö—É—Ä—Å: {course.course_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–∫—Ü–∏–π –∏ —Å–ª–∞–π–¥–æ–≤:\n\n"
    
    keyboard = []
    for i, module in enumerate(course.modules):
        text += f"{i+1}. {module.module_title}\n"
        keyboard.append([InlineKeyboardButton(
            f"üìö {i+1}. {module.module_title[:35]}", 
            callback_data=f"gen_content_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def regenerate_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ–∫—Ü–∏–π –∏ —Å–ª–∞–π–¥–æ–≤"""
    user_id = update.effective_user.id
    
    if user_id not in user_sessions or not user_sessions[user_id].current_module_content:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
            "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è"
        )
        return
    
    module_content = user_sessions[user_id].current_module_content
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
    text += f"–ú–æ–¥—É–ª—å: {module_content.module_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:\n\n"
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–∫—Ü–∏–∏
    for i, lecture in enumerate(module_content.lectures):
        text += f"üìñ {i+1}. {lecture.lecture_title} ({len(lecture.slides)} —Å–ª–∞–π–¥–æ–≤)\n"
        keyboard.append([InlineKeyboardButton(
            f"üìñ {i+1}. {lecture.lecture_title[:30]}", 
            callback_data=f"regen_lecture_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def regenerate_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –∏–∑ –º–æ–¥—É–ª—è –∫—É—Ä—Å–∞"""
    user_id = update.effective_user.id
    
    if user_id not in user_sessions or not user_sessions[user_id].current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    session = user_sessions[user_id]
    course = session.current_course
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞</b>\n\n"
    text += f"–ö—É—Ä—Å: {course.course_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:\n\n"
    
    keyboard = []
    for i, module in enumerate(course.modules):
        keyboard.append([InlineKeyboardButton(
            f"üì¶ {module.module_title} ({len(module.lessons)} —É—Ä–æ–∫–æ–≤)",
            callback_data=f"regen_lesson_module_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def generate_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –ø–ª–∞–Ω—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    user_id = update.effective_user.id
    
    if user_id not in user_sessions or not user_sessions[user_id].current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    session = user_sessions[user_id]
    course = session.current_course
    
    text = f"üìñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
    text += f"–ö—É—Ä—Å: {course.course_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n\n"
    
    keyboard = []
    for i, module in enumerate(course.modules):
        keyboard.append([InlineKeyboardButton(
            f"üìö {module.module_title} ({len(module.lessons)} —É—Ä–æ–∫–æ–≤)",
            callback_data=f"gen_topics_module_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def export_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –∫—É—Ä—Å–∞ - –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞"""
    user_id = update.effective_user.id
    
    if user_id not in user_sessions or not user_sessions[user_id].current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    keyboard = [
        [InlineKeyboardButton("üìÑ JSON - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º", callback_data="export_json")],
        [InlineKeyboardButton("üåê HTML - –∫—Ä–∞—Å–∏–≤–∞—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="export_html")],
        [InlineKeyboardButton("üìù Markdown - –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤", callback_data="export_md")],
        [InlineKeyboardButton("üìÉ TXT - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", callback_data="export_txt")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:</b>\n\n"
        "‚Ä¢ <b>JSON</b> - –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
        "‚Ä¢ <b>HTML</b> - –∫—Ä–∞—Å–∏–≤–∞—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n"
        "‚Ä¢ <b>Markdown</b> - –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Notion, Obsidian\n"
        "‚Ä¢ <b>TXT</b> - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def handle_callback(query_update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = query_update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if user_id not in user_sessions:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    session = user_sessions[user_id]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    if data.startswith("level_"):
        level = data.split("_")[1]
        if not hasattr(session, 'temp_data'):
            session.temp_data = {}
        session.temp_data['level'] = level
        session.editing_path = "awaiting_topic"
        
        await query.edit_message_text(
            f"‚úÖ –£—Ä–æ–≤–µ–Ω—å: <b>{level.title()}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Python –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'):",
            parse_mode="HTML"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥—É–ª–µ–π
    elif data.startswith("modules_"):
        module_count = int(data.split("_")[1])
        session.temp_data['module_count'] = module_count
        session.editing_path = "awaiting_weeks"
        
        await query.edit_message_text(
            f"üìö –ú–æ–¥—É–ª–µ–π: <b>{module_count}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ –≤ –Ω–µ–¥–µ–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6):",
            parse_mode="HTML"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
    elif data.startswith("edit_mod_"):
        module_index = int(data.split("_")[2])
        await _handle_module_edit(query, user_id, module_index, session)
    
    elif data.startswith("edit_module_name_"):
        module_index = int(data.split("_")[3])
        session.editing_mode = True
        session.editing_path = f"edit_module_name_{module_index}"
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è:")
    
    elif data.startswith("edit_module_goal_"):
        module_index = int(data.split("_")[3])
        session.editing_mode = True
        session.editing_path = f"edit_module_goal_{module_index}"
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –º–æ–¥—É–ª—è:")
    
    elif data.startswith("gen_module_goal_"):
        module_index = int(data.split("_")[3])
        await _generate_module_goal(query, user_id, module_index, session)
    
    elif data.startswith("gen_content_"):
        module_index = int(data.split("_")[2])
        await _generate_module_content(query, user_id, module_index, session)
    
    # –í–ê–ñ–ù–û: –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø–µ—Ä–≤—ã–º–∏!
    elif data.startswith("regen_lecture_full_"):
        lecture_index = int(data.split("_")[3])
        await _regenerate_lecture(query, user_id, lecture_index, session, None)
    
    elif data.startswith("regen_lecture_custom_"):
        lecture_index = int(data.split("_")[3])
        session.editing_mode = True
        session.editing_path = f"regen_lecture_custom_{lecture_index}"
        await query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–µ–∫—Ü–∏–∏:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤\n"
            "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏\n"
            "‚Ä¢ –ë–æ–ª—å—à–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º"
        )
    
    elif data.startswith("regen_lecture_"):
        lecture_index = int(data.split("_")[2])
        await _show_lecture_regenerate_menu(query, user_id, lecture_index, session)
    
    elif data.startswith("select_slide_"):
        lecture_index = int(data.split("_")[2])
        await _show_slides_list(query, user_id, lecture_index, session)
    
    elif data.startswith("regen_slide_full_"):
        parts = data.split("_")
        lecture_index = int(parts[3])
        slide_index = int(parts[4])
        await _regenerate_slide(query, user_id, lecture_index, slide_index, session, None)
    
    elif data.startswith("start_regen_slide_"):
        parts = data.split("_")
        lecture_index = int(parts[3])
        slide_index = int(parts[4])
        custom_req = session.temp_data.get('custom_req')
        await _regenerate_slide(query, user_id, lecture_index, slide_index, session, custom_req)
    
    elif data.startswith("start_regen_lecture_"):
        lecture_index = int(data.split("_")[3])
        custom_req = session.temp_data.get('custom_req')
        await _regenerate_lecture(query, user_id, lecture_index, session, custom_req)
    
    elif data.startswith("regen_slide_custom_"):
        parts = data.split("_")
        lecture_index = int(parts[3])
        slide_index = int(parts[4])
        session.editing_mode = True
        session.editing_path = f"regen_slide_custom_{lecture_index}_{slide_index}"
        await query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–ª–∞–π–¥—É:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞\n"
            "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –ë–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π"
        )
    
    elif data.startswith("regen_slide_"):
        parts = data.split("_")
        lecture_index = int(parts[2])
        slide_index = int(parts[3])
        await _show_slide_regenerate_menu(query, user_id, lecture_index, slide_index, session)
    
    elif data.startswith("regen_lesson_module_"):
        module_index = int(data.split("_")[3])
        await _show_lessons_for_regen(query, user_id, module_index, session)
    
    elif data.startswith("view_module_"):
        module_index = int(data.split("_")[2])
        await _show_module_details(query, user_id, module_index, session)
    
    elif data.startswith("view_lesson_"):
        parts = data.split("_")
        module_index = int(parts[2])
        lesson_index = int(parts[3])
        await _show_lesson_details(query, user_id, module_index, lesson_index, session)
    
    elif data.startswith("gen_topics_module_"):
        module_index = int(data.split("_")[3])
        await _show_lessons_for_topic_gen(query, user_id, module_index, session)
    
    elif data.startswith("gen_topics_lesson_"):
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        await _generate_lesson_topics(query, user_id, module_index, lesson_index, session)
    
    elif data.startswith("regen_lesson_item_"):
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        await _show_lesson_regen_menu(query, user_id, module_index, lesson_index, session)
    
    elif data.startswith("regen_lesson_full_"):
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        await _regenerate_lesson_item(query, user_id, module_index, lesson_index, session, None)
    
    elif data.startswith("regen_lesson_custom_"):
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        session.editing_mode = True
        session.editing_path = f"regen_lesson_custom_{module_index}_{lesson_index}"
        await query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Ä–æ–∫—É:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n"
            "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\n"
            "‚Ä¢ –ë–æ–ª—å—à–µ —Ç–µ–æ—Ä–∏–∏\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
        )
    
    elif data.startswith("start_regen_lesson_item_"):
        parts = data.split("_")
        module_index = int(parts[4])
        lesson_index = int(parts[5])
        custom_req = session.temp_data.get('custom_req')
        await _regenerate_lesson_item(query, user_id, module_index, lesson_index, session, custom_req)
    
    elif data == "back_to_lectures":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ª–µ–∫—Ü–∏–π
        module_content = session.current_module_content
        text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
        text += f"–ú–æ–¥—É–ª—å: {module_content.module_title}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ü–∏—é:\n\n"
        
        keyboard = []
        for i, lecture in enumerate(module_content.lectures):
            text += f"üìñ {i+1}. {lecture.lecture_title}\n"
            keyboard.append([InlineKeyboardButton(
                f"üìñ {i+1}. {lecture.lecture_title[:30]}", 
                callback_data=f"regen_lecture_{i}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
    
    elif data == "back_to_edit":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π
        course = session.current_course
        text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:</b> {course.course_title}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        
        keyboard = []
        for i, module in enumerate(course.modules):
            text += f"{i+1}. {module.module_title}\n"
            keyboard.append([InlineKeyboardButton(
                f"{i+1}. {module.module_title[:40]}", 
                callback_data=f"edit_mod_{i}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data="back_to_course")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
    
    elif data == "export_now":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üìÑ JSON", callback_data="export_json")],
            [InlineKeyboardButton("üåê HTML", callback_data="export_html")],
            [InlineKeyboardButton("üìù Markdown", callback_data="export_md")],
            [InlineKeyboardButton("üìÉ TXT", callback_data="export_txt")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:</b>",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    
    elif data.startswith("export_mcontent_"):
        # –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è
        parts = data.split("_")
        export_format = parts[2]  # json, html, md, txt
        module_index = int(parts[3])
        
        module_content = session.current_module_content
        
        if not module_content:
            await query.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        
        await query.answer("üîÑ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª...")
        
        if export_format == "json":
            content_str = course_exporter.export_module_content_to_json(module_content)
            filename = f"{module_content.module_title.replace(' ', '_')}_lectures.json"
            caption = "üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è –≤ JSON"
        
        elif export_format == "html":
            content_str = course_exporter.export_module_content_to_html(module_content)
            filename = f"{module_content.module_title.replace(' ', '_')}_lectures.html"
            caption = "üåê –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ª–µ–∫—Ü–∏–π - –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        
        elif export_format == "md":
            content_str = course_exporter.export_module_content_to_markdown(module_content)
            filename = f"{module_content.module_title.replace(' ', '_')}_lectures.md"
            caption = "üìù –õ–µ–∫—Ü–∏–∏ –≤ Markdown"
        
        elif export_format == "txt":
            content_str = course_exporter.export_module_content_to_txt(module_content)
            filename = f"{module_content.module_title.replace(' ', '_')}_lectures.txt"
            caption = "üìÉ –õ–µ–∫—Ü–∏–∏ –≤ TXT"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await query.message.reply_document(
            document=content_str.encode('utf-8'),
            filename=filename,
            caption=f"{caption}\n\n–õ–µ–∫—Ü–∏–π: {len(module_content.lectures)} ‚Ä¢ –°–ª–∞–π–¥–æ–≤: {module_content.total_slides}"
        )
        
        await query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    elif data.startswith("export_topics_menu_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        
        course = session.current_course
        module = course.modules[module_index]
        lesson = module.lessons[lesson_index]
        
        if not lesson.detailed_content:
            await query.answer("‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìÑ JSON - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º", callback_data=f"export_topics_json_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üåê HTML - –∫—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"export_topics_html_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üìù Markdown - –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤", callback_data=f"export_topics_md_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üìÉ TXT - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", callback_data=f"export_topics_txt_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"gen_topics_module_{module_index}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
            f"–£—Ä–æ–∫: {lesson.lesson_title}\n"
            f"–¢–µ–º: {len(lesson.detailed_content.topics)}\n"
            f"–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: ~{lesson.detailed_content.total_estimated_time_minutes} –º–∏–Ω\n\n"
            f"‚Ä¢ <b>JSON</b> - –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
            f"‚Ä¢ <b>HTML</b> - –∫—Ä–∞—Å–∏–≤–∞—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
            f"‚Ä¢ <b>Markdown</b> - –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Notion, Obsidian\n"
            f"‚Ä¢ <b>TXT</b> - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    
    elif data.startswith("export_topics_"):
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        parts = data.split("_")
        export_format = parts[2]  # json, html, md, txt
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        
        course = session.current_course
        module = course.modules[module_index]
        lesson = module.lessons[lesson_index]
        
        if not lesson.detailed_content:
            await query.answer("‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        
        await query.answer("üîÑ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª...")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if export_format == "json":
            content_str = course_exporter.export_lesson_content_to_json(lesson.detailed_content)
            filename = f"{lesson.lesson_title.replace(' ', '_')}_detailed.json"
            caption = "üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ JSON"
        
        elif export_format == "html":
            content_str = course_exporter.export_lesson_content_to_html(lesson.detailed_content)
            filename = f"{lesson.lesson_title.replace(' ', '_')}_detailed.html"
            caption = "üåê –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        
        elif export_format == "md":
            content_str = course_exporter.export_lesson_content_to_markdown(lesson.detailed_content)
            filename = f"{lesson.lesson_title.replace(' ', '_')}_detailed.md"
            caption = "üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ Markdown"
        
        elif export_format == "txt":
            content_str = course_exporter.export_lesson_content_to_txt(lesson.detailed_content)
            filename = f"{lesson.lesson_title.replace(' ', '_')}_detailed.txt"
            caption = "üìÉ –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ TXT"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await query.message.reply_document(
            document=content_str.encode('utf-8'),
            filename=filename,
            caption=f"{caption}\n\n–¢–µ–º: {len(lesson.detailed_content.topics)} | ~{lesson.detailed_content.total_estimated_time_minutes} –º–∏–Ω—É—Ç"
        )
        
        await query.edit_message_text(
            f"‚úÖ <b>–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–§–æ—Ä–º–∞—Ç: {export_format.upper()}\n"
            f"–§–∞–π–ª: {filename}",
            parse_mode="HTML"
        )
        
        await query.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    
    elif data.startswith("export_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫—É—Ä—Å–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        export_format = data.split("_")[1]
        course = session.current_course
        
        await query.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–π–ª...")
        
        if export_format == "json":
            content = course_exporter.export_to_json(course)
            filename = f"{course.course_title.replace(' ', '_')}.json"
            caption = "üìÑ –ö—É—Ä—Å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"
        
        elif export_format == "html":
            content = course_exporter.export_to_html(course)
            filename = f"{course.course_title.replace(' ', '_')}.html"
            caption = "üåê –ö—É—Ä—Å –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ - –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        
        elif export_format == "md":
            content = course_exporter.export_to_markdown(course)
            filename = f"{course.course_title.replace(' ', '_')}.md"
            caption = "üìù –ö—É—Ä—Å –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ"
        
        elif export_format == "txt":
            content = course_exporter.export_to_txt(course)
            filename = f"{course.course_title.replace(' ', '_')}.txt"
            caption = "üìÉ –ö—É—Ä—Å –≤ TXT —Ñ–æ—Ä–º–∞—Ç–µ"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await query.message.reply_document(
            document=content.encode('utf-8'),
            filename=filename,
            caption=caption
        )
        
        await query.edit_message_text(
            f"‚úÖ <b>–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–§–æ—Ä–º–∞—Ç: {export_format.upper()}\n"
            f"–§–∞–π–ª: {filename}",
            parse_mode="HTML"
        )
    
    elif data == "back_to_course":
        course = session.current_course
        text = f"üéì <b>{course.course_title}</b>\n\n"
        text += f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {course.target_audience}\n"
        if course.duration_weeks:
            text += f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {course.duration_weeks} –Ω–µ–¥–µ–ª—å\n"
        text += f"\nüìö <b>–ú–æ–¥—É–ª–µ–π:</b> {len(course.modules)}\n\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/view - –ø—Ä–æ—Å–º–æ—Ç—Ä\n/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n/export - —ç–∫—Å–ø–æ—Ä—Ç"
        await query.edit_message_text(text, parse_mode="HTML")


async def _handle_module_edit(query, user_id: int, module_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è"""
    course = session.current_course
    module = course.modules[module_index]
    
    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è {module_index + 1}</b>\n\n"
    text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {module.module_title}\n\n"
    text += f"<b>–¶–µ–ª—å:</b> {module.module_goal}\n\n"
    text += f"<b>–£—Ä–æ–∫–æ–≤:</b> {len(module.lessons)}\n\n"
    text += "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?"
    
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è", callback_data=f"edit_module_name_{module_index}")],
        [InlineKeyboardButton("üéØ –¶–µ–ª—å –º–æ–¥—É–ª—è", callback_data=f"edit_module_goal_{module_index}")],
        [InlineKeyboardButton("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å —Å AI", callback_data=f"gen_module_goal_{module_index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π", callback_data="back_to_edit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def _generate_module_content(query, user_id: int, module_index: int, session: UserSession):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—á–µ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–æ–¥—É–ª—è"""
    course = session.current_course
    module = course.modules[module_index]
    
    await query.edit_message_text(
        f"ü§ñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥—É–ª—è...</b>\n\n"
        f"–ú–æ–¥—É–ª—å: {module.module_title}\n"
        f"–£—Ä–æ–∫–æ–≤: {len(module.lessons)}\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    module_content = content_generator.generate_module_content(
        module=module,
        course_title=course.course_title,
        target_audience=course.target_audience
    )
    
    if module_content:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–µ—Å—Å–∏—é
        session.current_module_content = module_content
        
        text = f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        text += f"üìö <b>–ú–æ–¥—É–ª—å:</b> {module_content.module_title}\n"
        text += f"üìñ <b>–õ–µ–∫—Ü–∏–π:</b> {len(module_content.lectures)}\n"
        text += f"üìä <b>–°–ª–∞–π–¥–æ–≤:</b> {module_content.total_slides}\n"
        text += f"‚è±Ô∏è <b>–í—Ä–µ–º—è:</b> {module_content.estimated_duration_minutes} –º–∏–Ω—É—Ç\n\n"
        
        # –ö—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –ª–µ–∫—Ü–∏–π
        for i, lecture in enumerate(module_content.lectures, 1):
            text += f"{i}. {lecture.lecture_title} ({len(lecture.slides)} —Å–ª–∞–π–¥–æ–≤)\n"
        
        text += "\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>"
        
        keyboard = [
            [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç JSON", callback_data=f"export_mcontent_json_{module_index}")],
            [InlineKeyboardButton("üåê –≠–∫—Å–ø–æ—Ä—Ç HTML (–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è)", callback_data=f"export_mcontent_html_{module_index}")],
            [InlineKeyboardButton("üìù –≠–∫—Å–ø–æ—Ä—Ç Markdown", callback_data=f"export_mcontent_md_{module_index}")],
            [InlineKeyboardButton("üìÉ –≠–∫—Å–ø–æ—Ä—Ç TXT", callback_data=f"export_mcontent_txt_{module_index}")],
            [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"gen_content_{module_index}")],
            [InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—è–º", callback_data="back_to_edit")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_edit")
            ]])
        )


async def _show_lecture_regenerate_menu(query, user_id: int, lecture_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–∫—Ü–∏–∏"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ–∫—Ü–∏–∏</b>\n\n"
    text += f"üìñ {lecture.lecture_title}\n"
    text += f"üìä –°–ª–∞–π–¥–æ–≤: {len(lecture.slides)}\n"
    text += f"‚è±Ô∏è –í—Ä–µ–º—è: {lecture.duration_minutes} –º–∏–Ω—É—Ç\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –ª–µ–∫—Ü–∏—é", callback_data=f"regen_lecture_full_{lecture_index}")],
        [InlineKeyboardButton("‚úçÔ∏è –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏", callback_data=f"regen_lecture_custom_{lecture_index}")],
        [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–π–¥", callback_data=f"select_slide_{lecture_index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_lectures")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def _show_slides_list(query, user_id: int, lecture_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–∞–π–¥–æ–≤ –ª–µ–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    
    text = f"üìä <b>–°–ª–∞–π–¥—ã –ª–µ–∫—Ü–∏–∏:</b> {lecture.lecture_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–∞–π–¥ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
    
    keyboard = []
    for i, slide in enumerate(lecture.slides):
        text += f"{slide.slide_number}. {slide.title} ({slide.slide_type})\n"
        keyboard.append([InlineKeyboardButton(
            f"{slide.slide_number}. {slide.title[:35]}", 
            callback_data=f"regen_slide_{lecture_index}_{i}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"regen_lecture_{lecture_index}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def _show_lessons_for_regen(query, user_id: int, module_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –º–æ–¥—É–ª—è –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    course = session.current_course
    module = course.modules[module_index]
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞</b>\n\n"
    text += f"–ú–æ–¥—É–ª—å: {module.module_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
    
    keyboard = []
    for i, lesson in enumerate(module.lessons):
        keyboard.append([InlineKeyboardButton(
            f"üìù {i+1}. {lesson.lesson_title} ({lesson.estimated_time_minutes} –º–∏–Ω)",
            callback_data=f"regen_lesson_item_{module_index}_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def _show_lesson_regen_menu(query, user_id: int, module_index: int, lesson_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞"""
    course = session.current_course
    module = course.modules[module_index]
    lesson = module.lessons[lesson_index]
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞</b>\n\n"
    text += f"–ú–æ–¥—É–ª—å: {module.module_title}\n"
    text += f"–£—Ä–æ–∫: {lesson.lesson_title}\n"
    text += f"–§–æ—Ä–º–∞—Ç: {lesson.format}\n"
    text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.estimated_time_minutes} –º–∏–Ω\n\n"
    text += f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å:</b>\n{lesson.lesson_goal[:200]}...\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"regen_lesson_full_{module_index}_{lesson_index}")],
        [InlineKeyboardButton("‚úçÔ∏è –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏", callback_data=f"regen_lesson_custom_{module_index}_{lesson_index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º", callback_data=f"regen_lesson_module_{module_index}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def _regenerate_lesson_item(query, user_id: int, module_index: int, lesson_index: int, session: UserSession, custom_requirements: Optional[str]):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ä–æ–∫"""
    course = session.current_course
    module = course.modules[module_index]
    lesson = module.lessons[lesson_index]
    
    await query.edit_message_text(
        f"ü§ñ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞...</b>\n\n"
        f"–£—Ä–æ–∫: {lesson.lesson_title}\n\n"
        f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 20-30 —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω
    prompt = LESSON_REGENERATION_PROMPT_TEMPLATE.format(
        course_title=course.course_title,
        target_audience=course.target_audience,
        module_title=module.module_title,
        module_goal=module.module_goal,
        lesson_title=lesson.lesson_title,
        lesson_format=lesson.format,
        lesson_duration=lesson.estimated_time_minutes,
        lesson_goal=lesson.lesson_goal,
        content_outline=format_content_outline(lesson.content_outline),
        custom_requirements=format_custom_requirements(custom_requirements)
    )

    try:
        response = openai_client.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": LESSON_REGENERATION_SYSTEM_PROMPT},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        
        content = response.choices[0].message.content.strip()
        json_content = content_generator._extract_lesson_json(content)
        
        if json_content:
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫
            module.lessons[lesson_index] = Lesson(**json_content)
            
            text = f"‚úÖ <b>–£—Ä–æ–∫ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {json_content['lesson_title']}\n"
            text += f"<b>–§–æ—Ä–º–∞—Ç:</b> {json_content['format']}\n"
            text += f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {json_content['estimated_time_minutes']} –º–∏–Ω\n\n"
            text += f"<b>–ù–æ–≤–∞—è —Ü–µ–ª—å:</b>\n{json_content['lesson_goal']}\n\n"
            text += f"<b>–ü–ª–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>\n"
            for item in json_content['content_outline'][:5]:
                text += f"‚Ä¢ {item}\n"
            
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ö —É—Ä–æ–∫–∞–º –º–æ–¥—É–ª—è", callback_data=f"regen_lesson_module_{module_index}")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"regen_lesson_full_{module_index}_{lesson_index}")],
                [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å", callback_data="export_json")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å", callback_data="back_to_edit")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def _show_slide_regenerate_menu(query, user_id: int, lecture_index: int, slide_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    slide = lecture.slides[slide_index]
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–π–¥–∞</b>\n\n"
    text += f"–õ–µ–∫—Ü–∏—è: {lecture.lecture_title}\n"
    text += f"–°–ª–∞–π–¥ #{slide.slide_number}: {slide.title}\n"
    text += f"–¢–∏–ø: {slide.slide_type}\n\n"
    text += f"<b>–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n{slide.content[:200]}...\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"regen_slide_full_{lecture_index}_{slide_index}")],
        [InlineKeyboardButton("‚úçÔ∏è –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏", callback_data=f"regen_slide_custom_{lecture_index}_{slide_index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ª–µ–∫—Ü–∏–∏", callback_data=f"regen_lecture_{lecture_index}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def _regenerate_lecture(query, user_id: int, lecture_index: int, session: UserSession, custom_requirements: Optional[str]):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–µ–∫—Ü–∏—é"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    course = session.current_course
    
    await query.edit_message_text(
        f"ü§ñ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ–∫—Ü–∏–∏...</b>\n\n"
        f"–õ–µ–∫—Ü–∏—è: {lecture.lecture_title}\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    prompt = f"""–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π –î–ï–¢–ê–õ–¨–ù–£–Æ –ª–µ–∫—Ü–∏—é –¥–ª—è IT-–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–∞–π–¥–æ–≤.

–ö–£–†–°: {course.course_title}
–ê–£–î–ò–¢–û–†–ò–Ø: {course.target_audience}
–ú–û–î–£–õ–¨: {module_content.module_title}
–õ–ï–ö–¶–ò–Ø: {lecture.lecture_title}
–¢–ï–ö–£–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –°–õ–ê–ô–î–û–í: {len(lecture.slides)}

"""
    
    if custom_requirements:
        prompt += f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n{custom_requirements}\n\n"
    
    prompt += f"""–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ª–µ–∫—Ü–∏–∏ —Å 8-12 —Å–ª–∞–π–¥–∞–º–∏.

–¢–ò–ü–´ –°–õ–ê–ô–î–û–í:
- title: –ó–∞–≥–ª–∞–≤–Ω—ã–π
- content: –¢–µ–æ—Ä–∏—è (3-5 –ø—É–Ω–∫—Ç–æ–≤)
- code: –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
- diagram: –°—Ö–µ–º—ã (–æ–ø–∏—Å–∞–Ω–∏–µ)
- quiz: –í–æ–ø—Ä–æ—Å—ã
- summary: –ò—Ç–æ–≥–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Å—Ç—Ä–æ–≥–æ JSON
{{
  "lecture_title": "{lecture.lecture_title}",
  "module_number": {module_content.module_number},
  "module_title": "{module_content.module_title}",
  "duration_minutes": 45,
  "learning_objectives": ["—Ü–µ–ª—å 1", "—Ü–µ–ª—å 2"],
  "key_takeaways": ["–≤—ã–≤–æ–¥ 1", "–≤—ã–≤–æ–¥ 2"],
  "slides": [
    {{
      "slide_number": 1,
      "title": "...",
      "content": "...",
      "slide_type": "title",
      "code_example": null,
      "notes": "–∑–∞–º–µ—Ç–∫–∏"
    }}
  ]
}}"""

    try:
        response = openai_client.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–∑–¥–∞—ë—à—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ —Å–æ —Å–ª–∞–π–¥–∞–º–∏. –û—Ç–≤–µ—á–∞–µ—à—å —Å—Ç—Ä–æ–≥–æ –≤ JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=4000
        )
        
        content = response.choices[0].message.content.strip()
        json_content = content_generator._extract_json(content)
        
        if json_content:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–∫—Ü–∏—é
            module_content.lectures[lecture_index] = Lecture(**json_content)
            
            text = f"‚úÖ <b>–õ–µ–∫—Ü–∏—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            text += f"üìñ {lecture.lecture_title}\n"
            text += f"üìä –°–ª–∞–π–¥–æ–≤: {len(json_content['slides'])}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–∞–π–¥—ã", callback_data=f"view_slides_{lecture_index}")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"regen_lecture_full_{lecture_index}")],
                [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"export_lecture_{lecture_index}")],
                [InlineKeyboardButton("üîô –ö –ª–µ–∫—Ü–∏—è–º", callback_data="back_to_lectures")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–∫—Ü–∏–∏: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def _regenerate_slide(query, user_id: int, lecture_index: int, slide_index: int, session: UserSession, custom_requirements: Optional[str]):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–∞–π–¥"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    slide = lecture.slides[slide_index]
    course = session.current_course
    
    await query.edit_message_text(
        f"ü§ñ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–π–¥–∞...</b>\n\n"
        f"–°–ª–∞–π–¥ #{slide.slide_number}: {slide.title}\n\n"
        f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...",
        parse_mode="HTML"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞
    prompt = f"""–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ò–ù —Å–ª–∞–π–¥ –¥–ª—è IT-–ª–µ–∫—Ü–∏–∏.

–ö–û–ù–¢–ï–ö–°–¢:
–ö—É—Ä—Å: {course.course_title}
–ê—É–¥–∏—Ç–æ—Ä–∏—è: {course.target_audience}
–ú–æ–¥—É–ª—å: {module_content.module_title}
–õ–µ–∫—Ü–∏—è: {lecture.lecture_title}
–°–ª–∞–π–¥ #{slide.slide_number}: {slide.title}
–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {slide.slide_type}

–¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ù–¢ –°–õ–ê–ô–î–ê:
{slide.content}
"""
    
    if custom_requirements:
        prompt += f"\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n{custom_requirements}\n"
    
    prompt += f"""
–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —ç—Ç–æ–≥–æ —Å–ª–∞–π–¥–∞.

–¢–ò–ü–´ –°–õ–ê–ô–î–û–í:
- title: –ó–∞–≥–ª–∞–≤–Ω—ã–π
- content: –¢–µ–æ—Ä–∏—è (3-5 –ø—É–Ω–∫—Ç–æ–≤)
- code: –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å code_example)
- diagram: –°—Ö–µ–º—ã (–æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
- quiz: –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
- summary: –ò—Ç–æ–≥–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Å—Ç—Ä–æ–≥–æ JSON
{{
  "slide_number": {slide.slide_number},
  "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞",
  "content": "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞ (3-5 –ø—É–Ω–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ \\n)",
  "slide_type": "{slide.slide_type}",
  "code_example": "–∫–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∏–ª–∏ null",
  "notes": "–∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
}}

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!"""

    try:
        response = openai_client.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–∞–π–¥–æ–≤. –û—Ç–≤–µ—á–∞–µ—à—å —Å—Ç—Ä–æ–≥–æ –≤ JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=800
        )
        
        content = response.choices[0].message.content.strip()
        json_content = content_generator._extract_json(content)
        
        if json_content:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–π–¥
            lecture.slides[slide_index] = Slide(**json_content)
            
            text = f"‚úÖ <b>–°–ª–∞–π–¥ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            text += f"–°–ª–∞–π–¥ #{json_content['slide_number']}: {json_content['title']}\n"
            text += f"–¢–∏–ø: {json_content['slide_type']}\n\n"
            text += f"<b>–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n{json_content['content'][:200]}...\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–ª–∞–π–¥–æ–≤", callback_data=f"select_slide_{lecture_index}")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"regen_slide_full_{lecture_index}_{slide_index}")],
                [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫—Ü–∏—é", callback_data=f"export_mcontent_html_0")],
                [InlineKeyboardButton("üîô –ö –ª–µ–∫—Ü–∏—è–º", callback_data="back_to_lectures")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def _generate_module_goal(query, user_id: int, module_index: int, session: UserSession):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–ª—å –º–æ–¥—É–ª—è —Å –ø–æ–º–æ—â—å—é AI"""
    course = session.current_course
    module = course.modules[module_index]
    
    await query.edit_message_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ü–µ–ª—å –º–æ–¥—É–ª—è —Å –ø–æ–º–æ—â—å—é AI...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–ª–∏
    prompt = f"""–°–æ–∑–¥–∞–π –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–ª—å –¥–ª—è –º–æ–¥—É–ª—è IT-–∫—É—Ä—Å–∞.

–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course.course_title}
–£—Ä–æ–≤–µ–Ω—å: {course.target_audience}
–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è: {module.module_title}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ü–µ–ª–∏:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏ –∏–∑–º–µ—Ä–∏–º–∞—è
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –ë–ª—É–º–∞
- –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –æ—Ç 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π."""

    try:
        response = openai_client.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–º—É –¥–∏–∑–∞–π–Ω—É IT-–∫—É—Ä—Å–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=200
        )
        
        new_goal = response.choices[0].message.content.strip()
        module.module_goal = new_goal
        
        text = f"‚úÖ <b>–¶–µ–ª—å –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        text += f"<b>–ú–æ–¥—É–ª—å:</b> {module.module_title}\n\n"
        text += f"<b>–ù–æ–≤–∞—è —Ü–µ–ª—å:</b> {new_goal}\n\n"
        text += "–ß—Ç–æ –¥–∞–ª—å—à–µ?"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"edit_module_goal_{module_index}")],
            [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"gen_module_goal_{module_index}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é", callback_data=f"edit_mod_{module_index}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–ª–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–ª–∏: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_mod_{module_index}")
            ]])
        )


async def _show_module_details(query, user_id: int, module_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–æ–¥—É–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–æ–≤"""
    course = session.current_course
    module = course.modules[module_index]
    
    text = f"üìö <b>–ú–æ–¥—É–ª—å {module.module_number}: {module.module_title}</b>\n\n"
    text += f"<b>–¶–µ–ª—å:</b> {module.module_goal}\n\n"
    text += f"<b>–£—Ä–æ–∫–∏ ({len(module.lessons)}):</b>\n\n"
    
    keyboard = []
    for i, lesson in enumerate(module.lessons):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        has_detailed = "üìñ" if lesson.detailed_content else "üìù"
        content_count = len(lesson.content_outline) if lesson.content_outline else 0
        
        text += f"{has_detailed} {i+1}. {lesson.lesson_title} ({lesson.estimated_time_minutes} –º–∏–Ω)\n"
        
        keyboard.append([InlineKeyboardButton(
            f"{has_detailed} {i+1}. {lesson.lesson_title[:35]}",
            callback_data=f"view_lesson_{module_index}_{i}"
        )])
    
    text += f"\n<b>–õ–µ–≥–µ–Ω–¥–∞:</b>\n"
    text += "üìñ - –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
    text += "üìù - —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Ä–æ–∫–∞\n"
    
    keyboard.append([InlineKeyboardButton("üîô –ö –∫—É—Ä—Å—É", callback_data="back_to_course")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def _show_lesson_details(query, user_id: int, module_index: int, lesson_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    course = session.current_course
    module = course.modules[module_index]
    lesson = module.lessons[lesson_index]
    
    text = f"üìù <b>–£—Ä–æ–∫: {lesson.lesson_title}</b>\n\n"
    text += f"<b>–ú–æ–¥—É–ª—å:</b> {module.module_title}\n"
    text += f"<b>–§–æ—Ä–º–∞—Ç:</b> {lesson.format}\n"
    text += f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {lesson.estimated_time_minutes} –º–∏–Ω—É—Ç\n"
    text += f"<b>–û—Ü–µ–Ω–∫–∞:</b> {lesson.assessment}\n\n"
    text += f"<b>–¶–µ–ª—å —É—Ä–æ–∫–∞:</b>\n{lesson.lesson_goal}\n\n"
    
    if lesson.content_outline:
        text += f"<b>–ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è ({len(lesson.content_outline)} —Ç–µ–º):</b>\n"
        for i, topic in enumerate(lesson.content_outline[:5], 1):
            text += f"{i}. {topic}\n"
        if len(lesson.content_outline) > 5:
            text += f"... –∏ –µ—â—ë {len(lesson.content_outline) - 5} —Ç–µ–º\n"
        text += "\n"
    
    keyboard = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
    if lesson.detailed_content:
        text += f"‚úÖ <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n"
        text += f"–¢–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–æ: {len(lesson.detailed_content.topics)}\n"
        text += f"–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: ~{lesson.detailed_content.total_estimated_time_minutes} –º–∏–Ω\n\n"
        
        keyboard.append([InlineKeyboardButton(
            "üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data=f"export_topics_menu_{module_index}_{lesson_index}"
        )])
    else:
        text += "‚ÑπÔ∏è <i>–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã</i>\n\n"
        keyboard.append([InlineKeyboardButton(
            "ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data=f"gen_topics_lesson_{module_index}_{lesson_index}"
        )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard.append([InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"view_module_{module_index}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def _show_lessons_for_topic_gen(query, user_id: int, module_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –º–æ–¥—É–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    course = session.current_course
    module = course.modules[module_index]
    
    text = f"üìñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
    text += f"–ú–æ–¥—É–ª—å: {module.module_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –ø–ª–∞–Ω–∞:\n\n"
    
    keyboard = []
    for i, lesson in enumerate(module.lessons):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –≤ –ø–ª–∞–Ω–µ
        content_count = len(lesson.content_outline) if lesson.content_outline else 0
        keyboard.append([InlineKeyboardButton(
            f"üìù {i+1}. {lesson.lesson_title} ({content_count} —Ç–µ–º)",
            callback_data=f"gen_topics_lesson_{module_index}_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def _generate_lesson_topics(query, user_id: int, module_index: int, lesson_index: int, session: UserSession):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º —É—Ä–æ–∫–∞"""
    course = session.current_course
    module = course.modules[module_index]
    lesson = module.lessons[lesson_index]
    
    if not lesson.content_outline:
        await query.edit_message_text(
            "‚ùå –£ —É—Ä–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (content_outline).\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —É—Ä–æ–∫ —Å –ø–æ–º–æ—â—å—é /regenerate_lesson"
        )
        return
    
    await query.edit_message_text(
        f"ü§ñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...</b>\n\n"
        f"–£—Ä–æ–∫: {lesson.lesson_title}\n"
        f"–¢–µ–º –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è: {len(lesson.content_outline)}\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
        parse_mode="HTML"
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    lesson_content = content_generator.generate_lesson_detailed_content(
        lesson=lesson,
        module_number=module.module_number,
        course_title=course.course_title,
        module_title=module.module_title,
        target_audience=course.target_audience
    )
    
    if lesson_content:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —É—Ä–æ–∫
        lesson.detailed_content = lesson_content
        
        text = f"‚úÖ <b>–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
        text += f"üìö <b>–£—Ä–æ–∫:</b> {lesson.lesson_title}\n"
        text += f"üìñ <b>–¢–µ–º —Ä–∞—Å–∫—Ä—ã—Ç–æ:</b> {len(lesson_content.topics)}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Ç–µ–º
        text += "<b>–¢–µ–º—ã:</b>\n"
        for i, topic_material in enumerate(lesson_content.topics[:5], 1):
            text += f"{i}. {topic_material.topic_title}\n"
            text += f"   ‚Ä¢ {len(topic_material.examples)} –ø—Ä–∏–º–µ—Ä–æ–≤\n"
            text += f"   ‚Ä¢ {len(topic_material.quiz_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        
        if len(lesson_content.topics) > 5:
            text += f"... –∏ –µ—â—ë {len(lesson_content.topics) - 5} —Ç–µ–º\n"
        
        text += "\n<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>"
        
        keyboard = [
            [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"export_topics_menu_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"gen_topics_lesson_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–∫", callback_data=f"gen_topics_module_{module_index}")],
            [InlineKeyboardButton("üîô –ö –∫—É—Ä—Å—É", callback_data="back_to_course")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"gen_topics_module_{module_index}")
            ]])
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text.lower()
    
    if user_id not in user_sessions:
        user_sessions[user_id] = UserSession(user_id=user_id)
    
    session = user_sessions[user_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–æ—Å –ª–∏ —ç—Ç–æ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    if not session.editing_mode:
        if any(word in text for word in ['—Å–æ–∑–¥–∞–π –∫—É—Ä—Å', '—Å–¥–µ–ª–∞–π –∫—É—Ä—Å', '–∫—É—Ä—Å –ø–æ', '—Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å']):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            await create_course(update, context)
            return
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/create - —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å\n"
                "/view - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: '–°–æ–∑–¥–∞–π –∫—É—Ä—Å –ø–æ Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'"
            )
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞
    if session.editing_path and session.editing_path.startswith("regen_slide_custom_"):
        parts = session.editing_path.split("_")
        lecture_index = int(parts[3])
        slide_index = int(parts[4])
        custom_requirements = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
            f"ü§ñ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª–∞–π–¥ —Å —É—á—ë—Ç–æ–º:\n{custom_requirements}\n\n"
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-20 —Å–µ–∫—É–Ω–¥...",
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ callback
        session.temp_data['custom_req'] = custom_requirements
        session.temp_data['regen_type'] = 'slide'
        session.temp_data['lecture_idx'] = lecture_index
        session.temp_data['slide_idx'] = slide_index
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data=f"start_regen_slide_{lecture_index}_{slide_index}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞ (Lesson)
    elif session.editing_path and session.editing_path.startswith("regen_lesson_custom_"):
        parts = session.editing_path.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        custom_requirements = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
            f"ü§ñ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —É—Ä–æ–∫ —Å —É—á—ë—Ç–æ–º:\n{custom_requirements}\n\n"
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 20-30 —Å–µ–∫—É–Ω–¥...",
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        session.temp_data['custom_req'] = custom_requirements
        session.temp_data['regen_type'] = 'lesson'
        session.temp_data['module_idx'] = module_index
        session.temp_data['lesson_idx'] = lesson_index
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data=f"start_regen_lesson_item_{module_index}_{lesson_index}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–∫—Ü–∏–∏
    elif session.editing_path and session.editing_path.startswith("regen_lecture_custom_"):
        lecture_index = int(session.editing_path.split("_")[3])
        custom_requirements = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
            f"ü§ñ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ª–µ–∫—Ü–∏—é —Å —É—á—ë—Ç–æ–º:\n{custom_requirements[:200]}...\n\n"
            f"‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç 30-60 —Å–µ–∫—É–Ω–¥...",
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        session.temp_data['custom_req'] = custom_requirements
        session.temp_data['regen_type'] = 'lecture'
        session.temp_data['lecture_idx'] = lecture_index
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data=f"start_regen_lecture_{lecture_index}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
    elif session.editing_path and session.editing_path.startswith("edit_module_name_"):
        module_index = int(session.editing_path.split("_")[3])
        course = session.current_course
        course.modules[module_index].module_title = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"<b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {update.message.text}",
            parse_mode="HTML"
        )
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –æ–ø—Ü–∏–π
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å", callback_data=f"edit_mod_{module_index}")],
            [InlineKeyboardButton("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å —Å AI", callback_data=f"gen_module_goal_{module_index}")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π", callback_data="back_to_edit")],
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å", callback_data="back_to_course")],
            [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON", callback_data="export_now")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–∏ –º–æ–¥—É–ª—è
    elif session.editing_path and session.editing_path.startswith("edit_module_goal_"):
        module_index = int(session.editing_path.split("_")[3])
        course = session.current_course
        course.modules[module_index].module_goal = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ –¶–µ–ª—å –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"<b>–ù–æ–≤–∞—è —Ü–µ–ª—å:</b> {update.message.text}",
            parse_mode="HTML"
        )
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –º–µ–Ω—é –æ–ø—Ü–∏–π
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å", callback_data=f"edit_mod_{module_index}")],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_module_name_{module_index}")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π", callback_data="back_to_edit")],
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å", callback_data="back_to_course")],
            [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON", callback_data="export_now")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã
    elif session.editing_path == "awaiting_topic":
        session.temp_data['topic'] = update.message.text
        session.editing_path = "awaiting_modules"
        
        keyboard = []
        for i in range(3, 11):
            keyboard.append([InlineKeyboardButton(f"{i} –º–æ–¥—É–ª–µ–π", callback_data=f"modules_{i}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –¢–µ–º–∞: <b>{text}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π:",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ–¥–µ–ª—å
    elif session.editing_path == "awaiting_weeks":
        try:
            weeks = int(text)
            session.temp_data['duration_weeks'] = weeks
            session.editing_path = "awaiting_hours"
            
            await update.message.reply_text(
                f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {weeks} –Ω–µ–¥–µ–ª—å\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):"
            )
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ–¥–µ–ª—å:")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞
    elif session.editing_path == "awaiting_hours":
        try:
            hours = int(text)
            session.temp_data['hours_per_week'] = hours
            
            await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫—É—Ä—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—É—Ä—Å
            course_data = openai_client.generate_course_structure(
                topic=session.temp_data['topic'],
                audience_level=session.temp_data['level'],
                module_count=session.temp_data['module_count'],
                duration_weeks=session.temp_data['duration_weeks'],
                hours_per_week=hours
            )
            
            if course_data:
                try:
                    course = Course(**course_data)
                    session.current_course = course
                    session.editing_mode = False
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    text = f"‚úÖ <b>–ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    text += f"üéì <b>{course.course_title}</b>\n\n"
                    text += f"üë• {course.target_audience}\n"
                    text += f"‚è±Ô∏è {course.duration_weeks} –Ω–µ–¥–µ–ª—å\n"
                    text += f"üìö –ú–æ–¥—É–ª–µ–π: {len(course.modules)}\n\n"
                    text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    text += "/view - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n"
                    text += "/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏\n"
                    text += "/generate - —Å–æ–∑–¥–∞—Ç—å –ª–µ–∫—Ü–∏–∏ –∏ —Å–ª–∞–π–¥—ã\n"
                    text += "/export - —Å–∫–∞—á–∞—Ç—å –∫—É—Ä—Å"
                    
                    await update.message.reply_text(text, parse_mode="HTML")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å")
                
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤:")


# ---------- –ó–ê–ü–£–°–ö ----------
def main():
    if not TOKEN:
        print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return

    # –ü–∞—Ç—á–∏–º httpx.AsyncClient –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è SSL
    original_init = httpx.AsyncClient.__init__
    
    def patched_init(self, *args, **kwargs):
        kwargs['verify'] = False
        original_init(self, *args, **kwargs)
    
    httpx.AsyncClient.__init__ = patched_init
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ JobQueue (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Python 3.13)
    app = ApplicationBuilder().token(TOKEN).job_queue(None).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("create", create_course))
    app.add_handler(CommandHandler("view", view_course))
    app.add_handler(CommandHandler("edit", edit_course))
    app.add_handler(CommandHandler("generate", generate_content))
    app.add_handler(CommandHandler("regenerate", regenerate_content))
    app.add_handler(CommandHandler("regenerate_lesson", regenerate_lesson))
    app.add_handler(CommandHandler("generate_topics", generate_topics))
    app.add_handler(CommandHandler("export", export_course))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚úÖ AI Course Builder –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling(stop_signals=None, allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()

