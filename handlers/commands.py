"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from utils import get_session_manager, format_course_info

logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = update.effective_user.id
    session_manager = get_session_manager()
    session_manager.get_session(user_id)
    
    logger.info(f"/start –æ—Ç {update.effective_user.first_name}")
    await update.message.reply_text(
        "ü§ñ <b>AI Course Builder</b>\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É IT-–∫—É—Ä—Å–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò.\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å\n"
        "/view - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å\n"
        "/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏\n\n"
        "<b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>\n"
        "/generate - —Å–æ–∑–¥–∞—Ç—å –ª–µ–∫—Ü–∏–∏ –∏ —Å–ª–∞–π–¥—ã\n"
        "/regenerate - –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫—Ü–∏–∏/—Å–ª–∞–π–¥—ã\n"
        "/regenerate_lesson - –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫–∏\n"
        "/generate_topics - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Ç–µ–º–∞–º\n\n"
        "<b>–≠–∫—Å–ø–æ—Ä—Ç:</b>\n"
        "/export - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å (JSON/HTML/MD/TXT)\n\n"
        "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode="HTML"
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø—Ä–∞–≤–∫–∞"""
    await update.message.reply_text(
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        "<b>/create</b> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å\n"
        "–ë–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑–∞—Ç—å:\n"
        "‚Ä¢ –¢–µ–º—É –∫—É—Ä—Å–∞\n"
        "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å (junior/middle/senior)\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π (3-10)\n"
        "‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
        "<b>/view</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—É—Ä—Å–∞\n\n"
        "<b>/edit</b> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –ú–æ–¥—É–ª–∏ –∏ —É—Ä–æ–∫–∏\n"
        "‚Ä¢ –¶–µ–ª–∏ –∏ –æ—Ü–µ–Ω–∫–∏\n\n"
        "<b>/generate</b> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ª–µ–∫—Ü–∏–∏, —Å–ª–∞–π–¥—ã)\n\n"
        "<b>/regenerate</b> - –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫—Ü–∏–∏ –∏ —Å–ª–∞–π–¥—ã\n\n"
        "<b>/regenerate_lesson</b> - –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ä–æ–∫ –º–æ–¥—É–ª—è\n\n"
        "<b>/generate_topics</b> - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –ø–ª–∞–Ω–∞ —É—Ä–æ–∫–∞\n\n"
        "<b>/export</b> - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ JSON/HTML/Markdown/TXT\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
        "–°–æ–∑–¥–∞–π –∫—É—Ä—Å –ø–æ Python –¥–ª—è junior",
        parse_mode="HTML"
    )


async def create_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞"""
    user_id = update.effective_user.id
    session_manager = get_session_manager()
    session = session_manager.get_session(user_id)
    
    session.editing_mode = True
    session.editing_path = "awaiting_level"
    
    keyboard = [
        [InlineKeyboardButton("Junior", callback_data="level_junior")],
        [InlineKeyboardButton("Middle", callback_data="level_middle")],
        [InlineKeyboardButton("Senior", callback_data="level_senior")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéØ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
        parse_mode="HTML",
        reply_markup=reply_markup
    )


async def view_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫—É—Ä—Å–∞"""
    user_id = update.effective_user.id
    session_manager = get_session_manager()
    
    if not session_manager.has_session(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    session = session_manager.get_session(user_id)
    if not session.current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    course = session.current_course
    text = format_course_info(course)
    
    keyboard = []
    for i, module in enumerate(course.modules):
        keyboard.append([InlineKeyboardButton(
            f"üëÅÔ∏è {i+1}. –î–µ—Ç–∞–ª–∏ –º–æ–¥—É–ª—è: {module.module_title[:30]}",
            callback_data=f"view_module_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def edit_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞"""
    user_id = update.effective_user.id
    session_manager = get_session_manager()
    
    if not session_manager.has_session(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    session = session_manager.get_session(user_id)
    if not session.current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    course = session.current_course
    
    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:</b> {course.course_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    
    keyboard = []
    for i, module in enumerate(course.modules):
        text += f"{i+1}. {module.module_title}\n"
        keyboard.append([InlineKeyboardButton(
            f"{i+1}. {module.module_title[:40]}", 
            callback_data=f"edit_mod_{i}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data="back_to_course")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def generate_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥—É–ª—è"""
    user_id = update.effective_user.id
    session_manager = get_session_manager()
    
    if not session_manager.has_session(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫—É—Ä—Å —Å –ø–æ–º–æ—â—å—é /create")
        return
    
    session = session_manager.get_session(user_id)
    if not session.current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫—É—Ä—Å —Å –ø–æ–º–æ—â—å—é /create")
        return
    
    course = session.current_course
    
    text = f"üìù <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—á–µ–±–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
    text += f"–ö—É—Ä—Å: {course.course_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–∫—Ü–∏–π –∏ —Å–ª–∞–π–¥–æ–≤:\n\n"
    
    keyboard = []
    for i, module in enumerate(course.modules):
        text += f"{i+1}. {module.module_title}\n"
        keyboard.append([InlineKeyboardButton(
            f"üìö {i+1}. {module.module_title[:35]}", 
            callback_data=f"gen_content_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def regenerate_content(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ–∫—Ü–∏–π –∏ —Å–ª–∞–π–¥–æ–≤"""
    user_id = update.effective_user.id
    session_manager = get_session_manager()
    
    if not session_manager.has_session(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
            "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è"
        )
        return
    
    session = session_manager.get_session(user_id)
    if not session.current_module_content:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
            "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è"
        )
        return
    
    module_content = session.current_module_content
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
    text += f"–ú–æ–¥—É–ª—å: {module_content.module_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:\n\n"
    
    keyboard = []
    
    for i, lecture in enumerate(module_content.lectures):
        text += f"üìñ {i+1}. {lecture.lecture_title} ({len(lecture.slides)} —Å–ª–∞–π–¥–æ–≤)\n"
        keyboard.append([InlineKeyboardButton(
            f"üìñ {i+1}. {lecture.lecture_title[:30]}", 
            callback_data=f"regen_lecture_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def regenerate_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É—Ä–æ–∫–∞ –∏–∑ –º–æ–¥—É–ª—è –∫—É—Ä—Å–∞"""
    user_id = update.effective_user.id
    session_manager = get_session_manager()
    
    if not session_manager.has_session(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    session = session_manager.get_session(user_id)
    if not session.current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    course = session.current_course
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞</b>\n\n"
    text += f"–ö—É—Ä—Å: {course.course_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:\n\n"
    
    keyboard = []
    for i, module in enumerate(course.modules):
        keyboard.append([InlineKeyboardButton(
            f"üì¶ {module.module_title} ({len(module.lessons)} —É—Ä–æ–∫–æ–≤)",
            callback_data=f"regen_lesson_module_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def generate_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –ø–ª–∞–Ω—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    user_id = update.effective_user.id
    session_manager = get_session_manager()
    
    if not session_manager.has_session(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    session = session_manager.get_session(user_id)
    if not session.current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create")
        return
    
    course = session.current_course
    
    text = f"üìñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
    text += f"–ö—É—Ä—Å: {course.course_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n\n"
    
    keyboard = []
    for i, module in enumerate(course.modules):
        keyboard.append([InlineKeyboardButton(
            f"üìö {module.module_title} ({len(module.lessons)} —É—Ä–æ–∫–æ–≤)",
            callback_data=f"gen_topics_module_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def export_course(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –∫—É—Ä—Å–∞ - –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞"""
    user_id = update.effective_user.id
    session_manager = get_session_manager()
    
    if not session_manager.has_session(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    session = session_manager.get_session(user_id)
    if not session.current_course:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫—É—Ä—Å–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìÑ JSON - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º", callback_data="export_json")],
        [InlineKeyboardButton("üåê HTML - –∫—Ä–∞—Å–∏–≤–∞—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="export_html")],
        [InlineKeyboardButton("üìù Markdown - –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤", callback_data="export_md")],
        [InlineKeyboardButton("üìÉ TXT - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", callback_data="export_txt")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:</b>\n\n"
        "‚Ä¢ <b>JSON</b> - –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
        "‚Ä¢ <b>HTML</b> - –∫—Ä–∞—Å–∏–≤–∞—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n"
        "‚Ä¢ <b>Markdown</b> - –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Notion, Obsidian\n"
        "‚Ä¢ <b>TXT</b> - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
        parse_mode="HTML",
        reply_markup=reply_markup
    )

