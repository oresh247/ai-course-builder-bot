"""–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback"""

import logging
from typing import Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from models import UserSession, Lesson, Course
from openai_client import OpenAIClient
from content_generator import ContentGenerator
from exporters import CourseExporter
from utils import format_module_content_info, format_lesson_content_info, format_module_info, format_lesson_info
from prompts import (
    LESSON_REGENERATION_SYSTEM_PROMPT,
    LESSON_REGENERATION_PROMPT_TEMPLATE,
    format_content_outline,
    format_custom_requirements
)

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
openai_client = OpenAIClient()
content_generator = ContentGenerator()
course_exporter = CourseExporter()


async def handle_module_edit(query, user_id: int, module_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è"""
    course = session.current_course
    module = course.modules[module_index]
    
    text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è {module_index + 1}</b>\n\n"
    text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {module.module_title}\n\n"
    text += f"<b>–¶–µ–ª—å:</b> {module.module_goal}\n\n"
    text += f"<b>–£—Ä–æ–∫–æ–≤:</b> {len(module.lessons)}\n\n"
    text += "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?"
    
    keyboard = [
        [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è", callback_data=f"edit_module_name_{module_index}")],
        [InlineKeyboardButton("üéØ –¶–µ–ª—å –º–æ–¥—É–ª—è", callback_data=f"edit_module_goal_{module_index}")],
        [InlineKeyboardButton("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å —Å AI", callback_data=f"gen_module_goal_{module_index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –º–æ–¥—É–ª–µ–π", callback_data="back_to_edit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def generate_module_content(query, user_id: int, module_index: int, session: UserSession):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—á–µ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –º–æ–¥—É–ª—è"""
    course = session.current_course
    module = course.modules[module_index]
    
    await query.edit_message_text(
        f"ü§ñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–æ–¥—É–ª—è...</b>\n\n"
        f"–ú–æ–¥—É–ª—å: {module.module_title}\n"
        f"–£—Ä–æ–∫–æ–≤: {len(module.lessons)}\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    module_content = content_generator.generate_module_content(
        module=module,
        course_title=course.course_title,
        target_audience=course.target_audience
    )
    
    if module_content:
        session.current_module_content = module_content
        
        text = format_module_content_info(module_content)
        
        keyboard = [
            [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç JSON", callback_data=f"export_mcontent_json_{module_index}")],
            [InlineKeyboardButton("üåê –≠–∫—Å–ø–æ—Ä—Ç HTML (–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è)", callback_data=f"export_mcontent_html_{module_index}")],
            [InlineKeyboardButton("üìù –≠–∫—Å–ø–æ—Ä—Ç Markdown", callback_data=f"export_mcontent_md_{module_index}")],
            [InlineKeyboardButton("üìÉ –≠–∫—Å–ø–æ—Ä—Ç TXT", callback_data=f"export_mcontent_txt_{module_index}")],
            [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"gen_content_{module_index}")],
            [InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—è–º", callback_data="back_to_edit")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_edit")
            ]])
        )


async def show_lecture_regenerate_menu(query, user_id: int, lecture_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–∫—Ü–∏–∏"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ–∫—Ü–∏–∏</b>\n\n"
    text += f"üìñ {lecture.lecture_title}\n"
    text += f"üìä –°–ª–∞–π–¥–æ–≤: {len(lecture.slides)}\n"
    text += f"‚è±Ô∏è –í—Ä–µ–º—è: {lecture.duration_minutes} –º–∏–Ω—É—Ç\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—é –ª–µ–∫—Ü–∏—é", callback_data=f"regen_lecture_full_{lecture_index}")],
        [InlineKeyboardButton("‚úçÔ∏è –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏", callback_data=f"regen_lecture_custom_{lecture_index}")],
        [InlineKeyboardButton("üìä –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∞–π–¥", callback_data=f"select_slide_{lecture_index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_lectures")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def show_slides_list(query, user_id: int, lecture_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–∞–π–¥–æ–≤ –ª–µ–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    
    text = f"üìä <b>–°–ª–∞–π–¥—ã –ª–µ–∫—Ü–∏–∏:</b> {lecture.lecture_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–∞–π–¥ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
    
    keyboard = []
    for i, slide in enumerate(lecture.slides):
        text += f"{slide.slide_number}. {slide.title} ({slide.slide_type})\n"
        keyboard.append([InlineKeyboardButton(
            f"{slide.slide_number}. {slide.title[:35]}", 
            callback_data=f"regen_slide_{lecture_index}_{i}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"regen_lecture_{lecture_index}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def show_lessons_for_regen(query, user_id: int, module_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –º–æ–¥—É–ª—è –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    course = session.current_course
    module = course.modules[module_index]
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞</b>\n\n"
    text += f"–ú–æ–¥—É–ª—å: {module.module_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n\n"
    
    keyboard = []
    for i, lesson in enumerate(module.lessons):
        keyboard.append([InlineKeyboardButton(
            f"üìù {i+1}. {lesson.lesson_title} ({lesson.estimated_time_minutes} –º–∏–Ω)",
            callback_data=f"regen_lesson_item_{module_index}_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def show_lesson_regen_menu(query, user_id: int, module_index: int, lesson_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞"""
    course = session.current_course
    module = course.modules[module_index]
    lesson = module.lessons[lesson_index]
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞</b>\n\n"
    text += f"–ú–æ–¥—É–ª—å: {module.module_title}\n"
    text += f"–£—Ä–æ–∫: {lesson.lesson_title}\n"
    text += f"–§–æ—Ä–º–∞—Ç: {lesson.format}\n"
    text += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.estimated_time_minutes} –º–∏–Ω\n\n"
    text += f"<b>–¢–µ–∫—É—â–∞—è —Ü–µ–ª—å:</b>\n{lesson.lesson_goal[:200]}...\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"regen_lesson_full_{module_index}_{lesson_index}")],
        [InlineKeyboardButton("‚úçÔ∏è –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏", callback_data=f"regen_lesson_custom_{module_index}_{lesson_index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫–∞–º", callback_data=f"regen_lesson_module_{module_index}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def show_module_details(query, user_id: int, module_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–æ–¥—É–ª—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–æ–≤"""
    course = session.current_course
    module = course.modules[module_index]
    
    text = format_module_info(module, module.module_number)
    
    keyboard = []
    for i, lesson in enumerate(module.lessons):
        has_detailed = "üìñ" if lesson.detailed_content else "üìù"
        
        keyboard.append([InlineKeyboardButton(
            f"{has_detailed} {i+1}. {lesson.lesson_title[:35]}",
            callback_data=f"view_lesson_{module_index}_{i}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ö –∫—É—Ä—Å—É", callback_data="back_to_course")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def show_lesson_details(query, user_id: int, module_index: int, lesson_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —É—Ä–æ–∫–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    course = session.current_course
    module = course.modules[module_index]
    lesson = module.lessons[lesson_index]
    
    text = format_lesson_info(lesson, module.module_title)
    
    keyboard = []
    
    if lesson.detailed_content:
        keyboard.append([InlineKeyboardButton(
            "üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data=f"export_topics_menu_{module_index}_{lesson_index}"
        )])
    else:
        keyboard.append([InlineKeyboardButton(
            "ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
            callback_data=f"gen_topics_lesson_{module_index}_{lesson_index}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ö –º–æ–¥—É–ª—é", callback_data=f"view_module_{module_index}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def show_lessons_for_topic_gen(query, user_id: int, module_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –º–æ–¥—É–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
    course = session.current_course
    module = course.modules[module_index]
    
    text = f"üìñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
    text += f"–ú–æ–¥—É–ª—å: {module.module_title}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—É–Ω–∫—Ç—É –ø–ª–∞–Ω–∞:\n\n"
    
    keyboard = []
    for i, lesson in enumerate(module.lessons):
        content_count = len(lesson.content_outline) if lesson.content_outline else 0
        keyboard.append([InlineKeyboardButton(
            f"üìù {i+1}. {lesson.lesson_title} ({content_count} —Ç–µ–º)",
            callback_data=f"gen_topics_lesson_{module_index}_{i}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def generate_lesson_topics(query, user_id: int, module_index: int, lesson_index: int, session: UserSession):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ–º —É—Ä–æ–∫–∞"""
    course = session.current_course
    module = course.modules[module_index]
    lesson = module.lessons[lesson_index]
    
    if not lesson.content_outline:
        await query.edit_message_text(
            "‚ùå –£ —É—Ä–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è (content_outline).\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —É—Ä–æ–∫ —Å –ø–æ–º–æ—â—å—é /regenerate_lesson"
        )
        return
    
    await query.edit_message_text(
        f"ü§ñ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...</b>\n\n"
        f"–£—Ä–æ–∫: {lesson.lesson_title}\n"
        f"–¢–µ–º –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è: {len(lesson.content_outline)}\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
        parse_mode="HTML"
    )
    
    lesson_content = content_generator.generate_lesson_detailed_content(
        lesson=lesson,
        module_number=module.module_number,
        course_title=course.course_title,
        module_title=module.module_title,
        target_audience=course.target_audience
    )
    
    if lesson_content:
        lesson.detailed_content = lesson_content
        
        text = format_lesson_content_info(lesson_content, lesson.lesson_title)
        
        keyboard = [
            [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"export_topics_menu_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"gen_topics_lesson_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —É—Ä–æ–∫", callback_data=f"gen_topics_module_{module_index}")],
            [InlineKeyboardButton("üîô –ö –∫—É—Ä—Å—É", callback_data="back_to_course")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"gen_topics_module_{module_index}")
            ]])
        )

