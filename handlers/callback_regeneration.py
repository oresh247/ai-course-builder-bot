"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

import logging
from typing import Optional
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

from models import UserSession, Lesson, Slide, Lecture
from openai_client import OpenAIClient
from content_generator import ContentGenerator
from prompts import (
    LESSON_REGENERATION_SYSTEM_PROMPT,
    LESSON_REGENERATION_PROMPT_TEMPLATE,
    format_content_outline,
    format_custom_requirements
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
_openai_client = None
_content_generator = None


def get_openai_client():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä OpenAIClient"""
    global _openai_client
    if _openai_client is None:
        _openai_client = OpenAIClient()
    return _openai_client


def get_content_generator():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ContentGenerator"""
    global _content_generator
    if _content_generator is None:
        _content_generator = ContentGenerator()
    return _content_generator


async def regenerate_lesson_item(query, user_id: int, module_index: int, lesson_index: int, 
                                 session: UserSession, custom_requirements: Optional[str]):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ä–æ–∫"""
    course = session.current_course
    module = course.modules[module_index]
    lesson = module.lessons[lesson_index]
    
    await query.edit_message_text(
        f"ü§ñ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ä–æ–∫–∞...</b>\n\n"
        f"–£—Ä–æ–∫: {lesson.lesson_title}\n\n"
        f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 20-30 —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    prompt = LESSON_REGENERATION_PROMPT_TEMPLATE.format(
        course_title=course.course_title,
        target_audience=course.target_audience,
        module_title=module.module_title,
        module_goal=module.module_goal,
        lesson_title=lesson.lesson_title,
        lesson_format=lesson.format,
        lesson_duration=lesson.estimated_time_minutes,
        lesson_goal=lesson.lesson_goal,
        content_outline=format_content_outline(lesson.content_outline),
        custom_requirements=format_custom_requirements(custom_requirements)
    )

    try:
        openai_client = get_openai_client()
        content_generator = get_content_generator()
        
        response = openai_client.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": LESSON_REGENERATION_SYSTEM_PROMPT},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000
        )
        
        content = response.choices[0].message.content.strip()
        json_content = content_generator._extract_lesson_json(content)
        
        if json_content:
            module.lessons[lesson_index] = Lesson(**json_content)
            
            text = f"‚úÖ <b>–£—Ä–æ–∫ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {json_content['lesson_title']}\n"
            text += f"<b>–§–æ—Ä–º–∞—Ç:</b> {json_content['format']}\n"
            text += f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {json_content['estimated_time_minutes']} –º–∏–Ω\n\n"
            text += f"<b>–ù–æ–≤–∞—è —Ü–µ–ª—å:</b>\n{json_content['lesson_goal']}\n\n"
            text += f"<b>–ü–ª–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b>\n"
            for item in json_content['content_outline'][:5]:
                text += f"‚Ä¢ {item}\n"
            
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ö —É—Ä–æ–∫–∞–º –º–æ–¥—É–ª—è", callback_data=f"regen_lesson_module_{module_index}")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"regen_lesson_full_{module_index}_{lesson_index}")],
                [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å", callback_data="export_json")],
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å", callback_data="back_to_edit")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def show_slide_regenerate_menu(query, user_id: int, lecture_index: int, slide_index: int, session: UserSession):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    slide = lecture.slides[slide_index]
    
    text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–π–¥–∞</b>\n\n"
    text += f"–õ–µ–∫—Ü–∏—è: {lecture.lecture_title}\n"
    text += f"–°–ª–∞–π–¥ #{slide.slide_number}: {slide.title}\n"
    text += f"–¢–∏–ø: {slide.slide_type}\n\n"
    text += f"<b>–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n{slide.content[:200]}...\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"regen_slide_full_{lecture_index}_{slide_index}")],
        [InlineKeyboardButton("‚úçÔ∏è –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏", callback_data=f"regen_slide_custom_{lecture_index}_{slide_index}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ª–µ–∫—Ü–∏–∏", callback_data=f"regen_lecture_{lecture_index}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)


async def regenerate_lecture(query, user_id: int, lecture_index: int, session: UserSession, custom_requirements: Optional[str]):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ª–µ–∫—Ü–∏—é"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    course = session.current_course
    
    await query.edit_message_text(
        f"ü§ñ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ–∫—Ü–∏–∏...</b>\n\n"
        f"–õ–µ–∫—Ü–∏—è: {lecture.lecture_title}\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...",
        parse_mode="HTML"
    )
    
    prompt = f"""–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π –î–ï–¢–ê–õ–¨–ù–£–Æ –ª–µ–∫—Ü–∏—é –¥–ª—è IT-–∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–∞–π–¥–æ–≤.

–ö–£–†–°: {course.course_title}
–ê–£–î–ò–¢–û–†–ò–Ø: {course.target_audience}
–ú–û–î–£–õ–¨: {module_content.module_title}
–õ–ï–ö–¶–ò–Ø: {lecture.lecture_title}
–¢–ï–ö–£–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –°–õ–ê–ô–î–û–í: {len(lecture.slides)}

"""
    
    if custom_requirements:
        prompt += f"–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n{custom_requirements}\n\n"
    
    prompt += f"""–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –ª–µ–∫—Ü–∏–∏ —Å 8-12 —Å–ª–∞–π–¥–∞–º–∏.

–¢–ò–ü–´ –°–õ–ê–ô–î–û–í:
- title: –ó–∞–≥–ª–∞–≤–Ω—ã–π
- content: –¢–µ–æ—Ä–∏—è (3-5 –ø—É–Ω–∫—Ç–æ–≤)
- code: –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞
- diagram: –°—Ö–µ–º—ã (–æ–ø–∏—Å–∞–Ω–∏–µ)
- quiz: –í–æ–ø—Ä–æ—Å—ã
- summary: –ò—Ç–æ–≥–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Å—Ç—Ä–æ–≥–æ JSON
{{
  "lecture_title": "{lecture.lecture_title}",
  "module_number": {module_content.module_number},
  "module_title": "{module_content.module_title}",
  "duration_minutes": 45,
  "learning_objectives": ["—Ü–µ–ª—å 1", "—Ü–µ–ª—å 2"],
  "key_takeaways": ["–≤—ã–≤–æ–¥ 1", "–≤—ã–≤–æ–¥ 2"],
  "slides": [
    {{
      "slide_number": 1,
      "title": "...",
      "content": "...",
      "slide_type": "title",
      "code_example": null,
      "notes": "–∑–∞–º–µ—Ç–∫–∏"
    }}
  ]
}}"""

    try:
        openai_client = get_openai_client()
        content_generator = get_content_generator()
        
        response = openai_client.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –°–æ–∑–¥–∞—ë—à—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ —Å–æ —Å–ª–∞–π–¥–∞–º–∏. –û—Ç–≤–µ—á–∞–µ—à—å —Å—Ç—Ä–æ–≥–æ –≤ JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=4000
        )
        
        content = response.choices[0].message.content.strip()
        json_content = content_generator._extract_json(content)
        
        if json_content:
            module_content.lectures[lecture_index] = Lecture(**json_content)
            
            text = f"‚úÖ <b>–õ–µ–∫—Ü–∏—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            text += f"üìñ {lecture.lecture_title}\n"
            text += f"üìä –°–ª–∞–π–¥–æ–≤: {len(json_content['slides'])}\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–∞–π–¥—ã", callback_data=f"view_slides_{lecture_index}")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"regen_lecture_full_{lecture_index}")],
                [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"export_lecture_{lecture_index}")],
                [InlineKeyboardButton("üîô –ö –ª–µ–∫—Ü–∏—è–º", callback_data="back_to_lectures")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–∫—Ü–∏–∏: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def regenerate_slide(query, user_id: int, lecture_index: int, slide_index: int, 
                           session: UserSession, custom_requirements: Optional[str]):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–∞–π–¥"""
    module_content = session.current_module_content
    lecture = module_content.lectures[lecture_index]
    slide = lecture.slides[slide_index]
    course = session.current_course
    
    await query.edit_message_text(
        f"ü§ñ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–π–¥–∞...</b>\n\n"
        f"–°–ª–∞–π–¥ #{slide.slide_number}: {slide.title}\n\n"
        f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...",
        parse_mode="HTML"
    )
    
    prompt = f"""–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ò–ù —Å–ª–∞–π–¥ –¥–ª—è IT-–ª–µ–∫—Ü–∏–∏.

–ö–û–ù–¢–ï–ö–°–¢:
–ö—É—Ä—Å: {course.course_title}
–ê—É–¥–∏—Ç–æ—Ä–∏—è: {course.target_audience}
–ú–æ–¥—É–ª—å: {module_content.module_title}
–õ–µ–∫—Ü–∏—è: {lecture.lecture_title}
–°–ª–∞–π–¥ #{slide.slide_number}: {slide.title}
–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {slide.slide_type}

–¢–ï–ö–£–©–ò–ô –ö–û–ù–¢–ï–ù–¢ –°–õ–ê–ô–î–ê:
{slide.content}
"""
    
    if custom_requirements:
        prompt += f"\n–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:\n{custom_requirements}\n"
    
    prompt += f"""
–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —ç—Ç–æ–≥–æ —Å–ª–∞–π–¥–∞.

–¢–ò–ü–´ –°–õ–ê–ô–î–û–í:
- title: –ó–∞–≥–ª–∞–≤–Ω—ã–π
- content: –¢–µ–æ—Ä–∏—è (3-5 –ø—É–Ω–∫—Ç–æ–≤)
- code: –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å code_example)
- diagram: –°—Ö–µ–º—ã (–æ–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏)
- quiz: –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
- summary: –ò—Ç–æ–≥–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Å—Ç—Ä–æ–≥–æ JSON
{{
  "slide_number": {slide.slide_number},
  "title": "–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞",
  "content": "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞ (3-5 –ø—É–Ω–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ \\n)",
  "slide_type": "{slide.slide_type}",
  "code_example": "–∫–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∏–ª–∏ null",
  "notes": "–∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
}}

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!"""

    try:
        openai_client = get_openai_client()
        content_generator = get_content_generator()
        
        response = openai_client.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–∞–π–¥–æ–≤. –û—Ç–≤–µ—á–∞–µ—à—å —Å—Ç—Ä–æ–≥–æ –≤ JSON."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=800
        )
        
        content = response.choices[0].message.content.strip()
        json_content = content_generator._extract_json(content)
        
        if json_content:
            lecture.slides[slide_index] = Slide(**json_content)
            
            text = f"‚úÖ <b>–°–ª–∞–π–¥ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            text += f"–°–ª–∞–π–¥ #{json_content['slide_number']}: {json_content['title']}\n"
            text += f"–¢–∏–ø: {json_content['slide_type']}\n\n"
            text += f"<b>–ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n{json_content['content'][:200]}...\n\n"
            
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ö —Å–ø–∏—Å–∫—É —Å–ª–∞–π–¥–æ–≤", callback_data=f"select_slide_{lecture_index}")],
                [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"regen_slide_full_{lecture_index}_{slide_index}")],
                [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–µ–∫—Ü–∏—é", callback_data=f"export_mcontent_html_0")],
                [InlineKeyboardButton("üîô –ö –ª–µ–∫—Ü–∏—è–º", callback_data="back_to_lectures")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def generate_module_goal(query, user_id: int, module_index: int, session: UserSession):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–ª—å –º–æ–¥—É–ª—è —Å –ø–æ–º–æ—â—å—é AI"""
    course = session.current_course
    module = course.modules[module_index]
    
    await query.edit_message_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ü–µ–ª—å –º–æ–¥—É–ª—è —Å –ø–æ–º–æ—â—å—é AI...")
    
    prompt = f"""–°–æ–∑–¥–∞–π –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–ª—å –¥–ª—è –º–æ–¥—É–ª—è IT-–∫—É—Ä—Å–∞.

–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course.course_title}
–£—Ä–æ–≤–µ–Ω—å: {course.target_audience}
–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è: {module.module_title}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ü–µ–ª–∏:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏ –∏–∑–º–µ—Ä–∏–º–∞—è
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–∫—Å–æ–Ω–æ–º–∏–∏ –ë–ª—É–º–∞
- –§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –æ—Ç 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π."""

    try:
        openai_client = get_openai_client()
        
        response = openai_client.client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–º—É –¥–∏–∑–∞–π–Ω—É IT-–∫—É—Ä—Å–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=200
        )
        
        new_goal = response.choices[0].message.content.strip()
        module.module_goal = new_goal
        
        text = f"‚úÖ <b>–¶–µ–ª—å –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        text += f"<b>–ú–æ–¥—É–ª—å:</b> {module.module_title}\n\n"
        text += f"<b>–ù–æ–≤–∞—è —Ü–µ–ª—å:</b> {new_goal}\n\n"
        text += "–ß—Ç–æ –¥–∞–ª—å—à–µ?"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data=f"edit_module_goal_{module_index}")],
            [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"gen_module_goal_{module_index}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–æ–¥—É–ª—é", callback_data=f"edit_mod_{module_index}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–ª–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–µ–ª–∏: {e}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_mod_{module_index}")
            ]])
        )

