"""–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from utils import get_session_manager
from exporters import CourseExporter
from .callback_helpers import (
    handle_module_edit,
    generate_module_content,
    show_lecture_regenerate_menu,
    show_slides_list,
    show_lessons_for_regen,
    show_lesson_regen_menu,
    show_module_details,
    show_lesson_details,
    show_lessons_for_topic_gen,
    generate_lesson_topics
)
from .callback_regeneration import (
    regenerate_lesson_item,
    show_slide_regenerate_menu,
    regenerate_lecture,
    regenerate_slide,
    generate_module_goal
)

logger = logging.getLogger(__name__)
course_exporter = CourseExporter()


async def handle_callback(query_update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = query_update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    session_manager = get_session_manager()
    
    if not session_manager.has_session(user_id):
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    session = session_manager.get_session(user_id)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    if data.startswith("level_"):
        level = data.split("_")[1]
        if not hasattr(session, 'temp_data'):
            session.temp_data = {}
        session.temp_data['level'] = level
        session.editing_path = "awaiting_topic"
        
        await query.edit_message_text(
            f"‚úÖ –£—Ä–æ–≤–µ–Ω—å: <b>{level.title()}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∫—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Python –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'):",
            parse_mode="HTML"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–æ–¥—É–ª–µ–π
    elif data.startswith("modules_"):
        module_count = int(data.split("_")[1])
        session.temp_data['module_count'] = module_count
        session.editing_path = "awaiting_weeks"
        
        await query.edit_message_text(
            f"üìö –ú–æ–¥—É–ª–µ–π: <b>{module_count}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞ –≤ –Ω–µ–¥–µ–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 6):",
            parse_mode="HTML"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª–µ–π
    elif data.startswith("edit_mod_"):
        module_index = int(data.split("_")[2])
        await handle_module_edit(query, user_id, module_index, session)
    
    elif data.startswith("edit_module_name_"):
        module_index = int(data.split("_")[3])
        session.editing_mode = True
        session.editing_path = f"edit_module_name_{module_index}"
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è:")
    
    elif data.startswith("edit_module_goal_"):
        module_index = int(data.split("_")[3])
        session.editing_mode = True
        session.editing_path = f"edit_module_goal_{module_index}"
        await query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –º–æ–¥—É–ª—è:")
    
    elif data.startswith("gen_module_goal_"):
        module_index = int(data.split("_")[3])
        await generate_module_goal(query, user_id, module_index, session)
    
    elif data.startswith("gen_content_"):
        module_index = int(data.split("_")[2])
        await generate_module_content(query, user_id, module_index, session)
    
    # –í–ê–ñ–ù–û: –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø–µ—Ä–≤—ã–º–∏!
    elif data.startswith("regen_lecture_full_"):
        lecture_index = int(data.split("_")[3])
        await regenerate_lecture(query, user_id, lecture_index, session, None)
    
    elif data.startswith("regen_lecture_custom_"):
        lecture_index = int(data.split("_")[3])
        session.editing_mode = True
        session.editing_path = f"regen_lecture_custom_{lecture_index}"
        await query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ª–µ–∫—Ü–∏–∏:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤\n"
            "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏\n"
            "‚Ä¢ –ë–æ–ª—å—à–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º"
        )
    
    elif data.startswith("regen_lecture_"):
        lecture_index = int(data.split("_")[2])
        await show_lecture_regenerate_menu(query, user_id, lecture_index, session)
    
    elif data.startswith("select_slide_"):
        lecture_index = int(data.split("_")[2])
        await show_slides_list(query, user_id, lecture_index, session)
    
    elif data.startswith("regen_slide_full_"):
        parts = data.split("_")
        lecture_index = int(parts[3])
        slide_index = int(parts[4])
        await regenerate_slide(query, user_id, lecture_index, slide_index, session, None)
    
    elif data.startswith("start_regen_slide_"):
        parts = data.split("_")
        lecture_index = int(parts[3])
        slide_index = int(parts[4])
        custom_req = session.temp_data.get('custom_req')
        await regenerate_slide(query, user_id, lecture_index, slide_index, session, custom_req)
    
    elif data.startswith("start_regen_lecture_"):
        lecture_index = int(data.split("_")[3])
        custom_req = session.temp_data.get('custom_req')
        await regenerate_lecture(query, user_id, lecture_index, session, custom_req)
    
    elif data.startswith("regen_slide_custom_"):
        parts = data.split("_")
        lecture_index = int(parts[3])
        slide_index = int(parts[4])
        session.editing_mode = True
        session.editing_path = f"regen_slide_custom_{lecture_index}_{slide_index}"
        await query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–ª–∞–π–¥—É:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞\n"
            "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –ë–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π"
        )
    
    elif data.startswith("regen_slide_"):
        parts = data.split("_")
        lecture_index = int(parts[2])
        slide_index = int(parts[3])
        await show_slide_regenerate_menu(query, user_id, lecture_index, slide_index, session)
    
    elif data.startswith("regen_lesson_module_"):
        module_index = int(data.split("_")[3])
        await show_lessons_for_regen(query, user_id, module_index, session)
    
    elif data.startswith("view_module_"):
        module_index = int(data.split("_")[2])
        await show_module_details(query, user_id, module_index, session)
    
    elif data.startswith("view_lesson_"):
        parts = data.split("_")
        module_index = int(parts[2])
        lesson_index = int(parts[3])
        await show_lesson_details(query, user_id, module_index, lesson_index, session)
    
    elif data.startswith("gen_topics_module_"):
        module_index = int(data.split("_")[3])
        await show_lessons_for_topic_gen(query, user_id, module_index, session)
    
    elif data.startswith("gen_topics_lesson_"):
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        await generate_lesson_topics(query, user_id, module_index, lesson_index, session)
    
    elif data.startswith("regen_lesson_item_"):
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        await show_lesson_regen_menu(query, user_id, module_index, lesson_index, session)
    
    elif data.startswith("regen_lesson_full_"):
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        await regenerate_lesson_item(query, user_id, module_index, lesson_index, session, None)
    
    elif data.startswith("regen_lesson_custom_"):
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        session.editing_mode = True
        session.editing_path = f"regen_lesson_custom_{module_index}_{lesson_index}"
        await query.edit_message_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —É—Ä–æ–∫—É:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã\n"
            "‚Ä¢ –£–ø—Ä–æ—Å—Ç–∏—Ç—å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤\n"
            "‚Ä¢ –ë–æ–ª—å—à–µ —Ç–µ–æ—Ä–∏–∏\n"
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
        )
    
    elif data.startswith("start_regen_lesson_item_"):
        parts = data.split("_")
        module_index = int(parts[4])
        lesson_index = int(parts[5])
        custom_req = session.temp_data.get('custom_req')
        await regenerate_lesson_item(query, user_id, module_index, lesson_index, session, custom_req)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    elif data == "back_to_lectures":
        module_content = session.current_module_content
        text = f"üîÑ <b>–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>\n\n"
        text += f"–ú–æ–¥—É–ª—å: {module_content.module_title}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫—Ü–∏—é:\n\n"
        
        keyboard = []
        for i, lecture in enumerate(module_content.lectures):
            text += f"üìñ {i+1}. {lecture.lecture_title}\n"
            keyboard.append([InlineKeyboardButton(
                f"üìñ {i+1}. {lecture.lecture_title[:30]}", 
                callback_data=f"regen_lecture_{i}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
    
    elif data == "back_to_edit":
        course = session.current_course
        text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:</b> {course.course_title}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        
        keyboard = []
        for i, module in enumerate(course.modules):
            text += f"{i+1}. {module.module_title}\n"
            keyboard.append([InlineKeyboardButton(
                f"{i+1}. {module.module_title[:40]}", 
                callback_data=f"edit_mod_{i}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data="back_to_course")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, parse_mode="HTML", reply_markup=reply_markup)
    
    elif data == "export_now":
        keyboard = [
            [InlineKeyboardButton("üìÑ JSON", callback_data="export_json")],
            [InlineKeyboardButton("üåê HTML", callback_data="export_html")],
            [InlineKeyboardButton("üìù Markdown", callback_data="export_md")],
            [InlineKeyboardButton("üìÉ TXT", callback_data="export_txt")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:</b>",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    
    # –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º–æ–¥—É–ª—è
    elif data.startswith("export_mcontent_"):
        parts = data.split("_")
        export_format = parts[2]
        module_index = int(parts[3])
        
        module_content = session.current_module_content
        
        if not module_content:
            await query.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        
        await query.answer("üîÑ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª...")
        
        if export_format == "json":
            content_str = course_exporter.export_module_content_to_json(module_content)
            filename = f"{module_content.module_title.replace(' ', '_')}_lectures.json"
            caption = "üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è –≤ JSON"
        elif export_format == "html":
            content_str = course_exporter.export_module_content_to_html(module_content)
            filename = f"{module_content.module_title.replace(' ', '_')}_lectures.html"
            caption = "üåê –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ª–µ–∫—Ü–∏–π - –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        elif export_format == "md":
            content_str = course_exporter.export_module_content_to_markdown(module_content)
            filename = f"{module_content.module_title.replace(' ', '_')}_lectures.md"
            caption = "üìù –õ–µ–∫—Ü–∏–∏ –≤ Markdown"
        elif export_format == "txt":
            content_str = course_exporter.export_module_content_to_txt(module_content)
            filename = f"{module_content.module_title.replace(' ', '_')}_lectures.txt"
            caption = "üìÉ –õ–µ–∫—Ü–∏–∏ –≤ TXT"
        
        await query.message.reply_document(
            document=content_str.encode('utf-8'),
            filename=filename,
            caption=f"{caption}\n\n–õ–µ–∫—Ü–∏–π: {len(module_content.lectures)} ‚Ä¢ –°–ª–∞–π–¥–æ–≤: {module_content.total_slides}"
        )
        
        await query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞
    elif data.startswith("export_topics_menu_"):
        parts = data.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        
        course = session.current_course
        module = course.modules[module_index]
        lesson = module.lessons[lesson_index]
        
        if not lesson.detailed_content:
            await query.answer("‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìÑ JSON - –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º", callback_data=f"export_topics_json_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üåê HTML - –∫—Ä–∞—Å–∏–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"export_topics_html_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üìù Markdown - –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤", callback_data=f"export_topics_md_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üìÉ TXT - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç", callback_data=f"export_topics_txt_{module_index}_{lesson_index}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"gen_topics_module_{module_index}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</b>\n\n"
            f"–£—Ä–æ–∫: {lesson.lesson_title}\n"
            f"–¢–µ–º: {len(lesson.detailed_content.topics)}\n"
            f"–í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: ~{lesson.detailed_content.total_estimated_time_minutes} –º–∏–Ω\n\n"
            f"‚Ä¢ <b>JSON</b> - –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
            f"‚Ä¢ <b>HTML</b> - –∫—Ä–∞—Å–∏–≤–∞—è –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
            f"‚Ä¢ <b>Markdown</b> - –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Notion, Obsidian\n"
            f"‚Ä¢ <b>TXT</b> - –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    
    elif data.startswith("export_topics_"):
        parts = data.split("_")
        export_format = parts[2]
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        
        course = session.current_course
        module = course.modules[module_index]
        lesson = module.lessons[lesson_index]
        
        if not lesson.detailed_content:
            await query.answer("‚ùå –î–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            return
        
        await query.answer("üîÑ –°–æ–∑–¥–∞—é —Ñ–∞–π–ª...")
        
        if export_format == "json":
            content_str = course_exporter.export_lesson_content_to_json(lesson.detailed_content)
            filename = f"{lesson.lesson_title.replace(' ', '_')}_detailed.json"
            caption = "üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ JSON"
        elif export_format == "html":
            content_str = course_exporter.export_lesson_content_to_html(lesson.detailed_content)
            filename = f"{lesson.lesson_title.replace(' ', '_')}_detailed.html"
            caption = "üåê –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        elif export_format == "md":
            content_str = course_exporter.export_lesson_content_to_markdown(lesson.detailed_content)
            filename = f"{lesson.lesson_title.replace(' ', '_')}_detailed.md"
            caption = "üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ Markdown"
        elif export_format == "txt":
            content_str = course_exporter.export_lesson_content_to_txt(lesson.detailed_content)
            filename = f"{lesson.lesson_title.replace(' ', '_')}_detailed.txt"
            caption = "üìÉ –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ TXT"
        
        await query.message.reply_document(
            document=content_str.encode('utf-8'),
            filename=filename,
            caption=f"{caption}\n\n–¢–µ–º: {len(lesson.detailed_content.topics)} | ~{lesson.detailed_content.total_estimated_time_minutes} –º–∏–Ω—É—Ç"
        )
        
        await query.edit_message_text(
            f"‚úÖ <b>–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–§–æ—Ä–º–∞—Ç: {export_format.upper()}\n"
            f"–§–∞–π–ª: {filename}",
            parse_mode="HTML"
        )
        
        await query.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –∫—É—Ä—Å–∞
    elif data.startswith("export_"):
        export_format = data.split("_")[1]
        course = session.current_course
        
        await query.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–π–ª...")
        
        if export_format == "json":
            content = course_exporter.export_to_json(course)
            filename = f"{course.course_title.replace(' ', '_')}.json"
            caption = "üìÑ –ö—É—Ä—Å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"
        elif export_format == "html":
            content = course_exporter.export_to_html(course)
            filename = f"{course.course_title.replace(' ', '_')}.html"
            caption = "üåê –ö—É—Ä—Å –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ - –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
        elif export_format == "md":
            content = course_exporter.export_to_markdown(course)
            filename = f"{course.course_title.replace(' ', '_')}.md"
            caption = "üìù –ö—É—Ä—Å –≤ Markdown —Ñ–æ—Ä–º–∞—Ç–µ"
        elif export_format == "txt":
            content = course_exporter.export_to_txt(course)
            filename = f"{course.course_title.replace(' ', '_')}.txt"
            caption = "üìÉ –ö—É—Ä—Å –≤ TXT —Ñ–æ—Ä–º–∞—Ç–µ"
        
        await query.message.reply_document(
            document=content.encode('utf-8'),
            filename=filename,
            caption=caption
        )
        
        await query.edit_message_text(
            f"‚úÖ <b>–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–§–æ—Ä–º–∞—Ç: {export_format.upper()}\n"
            f"–§–∞–π–ª: {filename}",
            parse_mode="HTML"
        )
    
    elif data == "back_to_course":
        course = session.current_course
        text = f"üéì <b>{course.course_title}</b>\n\n"
        text += f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {course.target_audience}\n"
        if course.duration_weeks:
            text += f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {course.duration_weeks} –Ω–µ–¥–µ–ª—å\n"
        text += f"\nüìö <b>–ú–æ–¥—É–ª–µ–π:</b> {len(course.modules)}\n\n"
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/view - –ø—Ä–æ—Å–º–æ—Ç—Ä\n/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n/export - —ç–∫—Å–ø–æ—Ä—Ç"
        await query.edit_message_text(text, parse_mode="HTML")

