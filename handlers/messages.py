"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from models import Course
from utils import get_session_manager
from openai_client import OpenAIClient

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
_openai_client = None


def get_openai_client():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä OpenAIClient"""
    global _openai_client
    if _openai_client is None:
        _openai_client = OpenAIClient()
    return _openai_client


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text.lower()
    
    session_manager = get_session_manager()
    session = session_manager.get_session(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–æ—Å –ª–∏ —ç—Ç–æ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    if not session.editing_mode:
        if any(word in text for word in ['—Å–æ–∑–¥–∞–π –∫—É—Ä—Å', '—Å–¥–µ–ª–∞–π –∫—É—Ä—Å', '–∫—É—Ä—Å –ø–æ', '—Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å']):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞
            from .commands import create_course
            await create_course(update, context)
            return
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/create - —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å\n"
                "/view - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å\n"
                "/help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
                "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ: '–°–æ–∑–¥–∞–π –∫—É—Ä—Å –ø–æ Python –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö'"
            )
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π–¥–∞
    if session.editing_path and session.editing_path.startswith("regen_slide_custom_"):
        parts = session.editing_path.split("_")
        lecture_index = int(parts[3])
        slide_index = int(parts[4])
        custom_requirements = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
            f"ü§ñ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª–∞–π–¥ —Å —É—á—ë—Ç–æ–º:\n{custom_requirements}\n\n"
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10-20 —Å–µ–∫—É–Ω–¥...",
            parse_mode="HTML"
        )
        
        session.temp_data['custom_req'] = custom_requirements
        session.temp_data['regen_type'] = 'slide'
        session.temp_data['lecture_idx'] = lecture_index
        session.temp_data['slide_idx'] = slide_index
        
        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data=f"start_regen_slide_{lecture_index}_{slide_index}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ä–æ–∫–∞ (Lesson)
    elif session.editing_path and session.editing_path.startswith("regen_lesson_custom_"):
        parts = session.editing_path.split("_")
        module_index = int(parts[3])
        lesson_index = int(parts[4])
        custom_requirements = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
            f"ü§ñ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é —É—Ä–æ–∫ —Å —É—á—ë—Ç–æ–º:\n{custom_requirements}\n\n"
            f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 20-30 —Å–µ–∫—É–Ω–¥...",
            parse_mode="HTML"
        )
        
        session.temp_data['custom_req'] = custom_requirements
        session.temp_data['regen_type'] = 'lesson'
        session.temp_data['module_idx'] = module_index
        session.temp_data['lesson_idx'] = lesson_index
        
        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data=f"start_regen_lesson_item_{module_index}_{lesson_index}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–µ–∫—Ü–∏–∏
    elif session.editing_path and session.editing_path.startswith("regen_lecture_custom_"):
        lecture_index = int(session.editing_path.split("_")[3])
        custom_requirements = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ <b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã!</b>\n\n"
            f"ü§ñ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ª–µ–∫—Ü–∏—é —Å —É—á—ë—Ç–æ–º:\n{custom_requirements[:200]}...\n\n"
            f"‚è≥ –≠—Ç–æ –∑–∞–π–º—ë—Ç 30-60 —Å–µ–∫—É–Ω–¥...",
            parse_mode="HTML"
        )
        
        session.temp_data['custom_req'] = custom_requirements
        session.temp_data['regen_type'] = 'lecture'
        session.temp_data['lecture_idx'] = lecture_index
        
        keyboard = [[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é", callback_data=f"start_regen_lecture_{lecture_index}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
    elif session.editing_path and session.editing_path.startswith("edit_module_name_"):
        module_index = int(session.editing_path.split("_")[3])
        course = session.current_course
        course.modules[module_index].module_title = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"<b>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:</b> {update.message.text}",
            parse_mode="HTML"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å", callback_data=f"edit_mod_{module_index}")],
            [InlineKeyboardButton("ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å —Å AI", callback_data=f"gen_module_goal_{module_index}")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π", callback_data="back_to_edit")],
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å", callback_data="back_to_course")],
            [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON", callback_data="export_now")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª–∏ –º–æ–¥—É–ª—è
    elif session.editing_path and session.editing_path.startswith("edit_module_goal_"):
        module_index = int(session.editing_path.split("_")[3])
        course = session.current_course
        course.modules[module_index].module_goal = update.message.text
        session.editing_mode = False
        session.editing_path = None
        
        await update.message.reply_text(
            f"‚úÖ –¶–µ–ª—å –º–æ–¥—É–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
            f"<b>–ù–æ–≤–∞—è —Ü–µ–ª—å:</b> {update.message.text}",
            parse_mode="HTML"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –º–æ–¥—É–ª—å", callback_data=f"edit_mod_{module_index}")],
            [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_module_name_{module_index}")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π", callback_data="back_to_edit")],
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å", callback_data="back_to_course")],
            [InlineKeyboardButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å JSON", callback_data="export_now")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã
    elif session.editing_path == "awaiting_topic":
        session.temp_data['topic'] = update.message.text
        session.editing_path = "awaiting_modules"
        
        keyboard = []
        for i in range(3, 11):
            keyboard.append([InlineKeyboardButton(f"{i} –º–æ–¥—É–ª–µ–π", callback_data=f"modules_{i}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚úÖ –¢–µ–º–∞: <b>{text}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π:",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ–¥–µ–ª—å
    elif session.editing_path == "awaiting_weeks":
        try:
            weeks = int(text)
            session.temp_data['duration_weeks'] = weeks
            session.editing_path = "awaiting_hours"
            
            await update.message.reply_text(
                f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {weeks} –Ω–µ–¥–µ–ª—å\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5):"
            )
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ–¥–µ–ª—å:")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—É—Ä—Å–∞
    elif session.editing_path == "awaiting_hours":
        try:
            hours = int(text)
            session.temp_data['hours_per_week'] = hours
            
            await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫—É—Ä—Å... –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—É—Ä—Å
            openai_client = get_openai_client()
            course_data = openai_client.generate_course_structure(
                topic=session.temp_data['topic'],
                audience_level=session.temp_data['level'],
                module_count=session.temp_data['module_count'],
                duration_weeks=session.temp_data['duration_weeks'],
                hours_per_week=hours
            )
            
            if course_data:
                try:
                    course = Course(**course_data)
                    session.current_course = course
                    session.editing_mode = False
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    text = f"‚úÖ <b>–ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                    text += f"üéì <b>{course.course_title}</b>\n\n"
                    text += f"üë• {course.target_audience}\n"
                    text += f"‚è±Ô∏è {course.duration_weeks} –Ω–µ–¥–µ–ª—å\n"
                    text += f"üìö –ú–æ–¥—É–ª–µ–π: {len(course.modules)}\n\n"
                    text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                    text += "/view - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n"
                    text += "/edit - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏\n"
                    text += "/generate - —Å–æ–∑–¥–∞—Ç—å –ª–µ–∫—Ü–∏–∏ –∏ —Å–ª–∞–π–¥—ã\n"
                    text += "/export - —Å–∫–∞—á–∞—Ç—å –∫—É—Ä—Å"
                    
                    await update.message.reply_text(text, parse_mode="HTML")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É—Ä—Å–∞")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å")
                
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤:")

